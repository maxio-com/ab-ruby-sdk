# maxio_advanced_billing_formerly_chargify_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class ComponentsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.components
    @response_catcher = @controller.http_call_back
  end

  # This request will return a list of components for a site.
  def test_list_components
    # Parameters for the API call
    date_field = 'updated_at'
    start_date = nil
    end_date = nil
    start_datetime = nil
    end_datetime = nil
    include_archived = nil
    page = 1
    per_page = 20
    filter_ids = APIHelper.json_deserialize(
      '["1","2","3"]', false)
    filter_use_site_exchange_rate = true

    # Perform the API call through the SDK function
    result = @controller.list_components(date_field: date_field,
                                         start_date: start_date,
                                         end_date: end_date,
                                         start_datetime: start_datetime,
                                         end_datetime: end_datetime,
                                         include_archived: include_archived,
                                         page: page, per_page: per_page,
                                         filter_ids: filter_ids,
                                         filter_use_site_exchange_rate: filter_use_site_exchange_rate)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '[{"component":{"id":399850,"name":"$1.00 component","pricing_scheme":"p'\
      'er_unit","unit_name":"Component","unit_price":"1.0","product_family_id"'\
      ':997233,"price_per_unit_in_cents":null,"kind":"quantity_based_component'\
      '","archived":false,"taxable":false,"description":"Component","default_p'\
      'rice_point_id":121000,"prices":[{"id":630687,"component_id":399850,"sta'\
      'rting_quantity":1,"ending_quantity":null,"unit_price":"1.0","price_poin'\
      't_id":121000,"formatted_unit_price":"$1.00"}],"price_point_count":2,"pr'\
      'ice_points_url":"https://general-goods.chargify.com/components/399850/p'\
      'rice_points","tax_code":null,"recurring":true,"upgrade_charge":null,"do'\
      'wngrade_credit":null,"created_at":"2019-08-01T09:35:38-04:00","default_'\
      'price_point_name":"Original","product_family_name":"Chargify","use_site'\
      '_exchange_rate":true}},{"component":{"id":399853,"name":"Annual Support'\
      ' Services","pricing_scheme":null,"unit_name":"on/off","unit_price":"100'\
      '.0","product_family_id":997233,"price_per_unit_in_cents":null,"kind":"o'\
      'n_off_component","archived":false,"taxable":true,"description":"Prepay '\
      'for support services","default_price_point_id":121003,"price_point_coun'\
      't":4,"price_points_url":"https://general-goods.chargify.com/components/'\
      '399853/price_points","tax_code":"D0000000","recurring":true,"upgrade_ch'\
      'arge":null,"downgrade_credit":null,"created_at":"2019-08-01T09:35:37-04'\
      ':00","default_price_point_name":"Original","product_family_name":"Charg'\
      'ify","use_site_exchange_rate":true}},{"component":{"id":386937,"name":"'\
      'Cancellation fee","pricing_scheme":null,"unit_name":"on/off","unit_pric'\
      'e":"35.0","product_family_id":997233,"price_per_unit_in_cents":null,"ki'\
      'nd":"on_off_component","archived":false,"taxable":false,"description":"'\
      '","default_price_point_id":108307,"price_point_count":1,"price_points_u'\
      'rl":"https://general-goods.chargify.com/components/386937/price_points"'\
      ',"tax_code":null,"recurring":true,"upgrade_charge":null,"downgrade_cred'\
      'it":null,"created_at":"2019-08-01T09:35:38-04:00","default_price_point_'\
      'name":"Original","product_family_name":"Chargify","use_site_exchange_ra'\
      'te":true}}]'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

  # This method allows to retrieve a list of Components Price Points belonging to a Site.
  def test_list_all_component_price_points
    # Parameters for the API call
    filter_date_field = 'updated_at'
    filter_end_date = nil
    filter_end_datetime = nil
    include = 'currency_prices'
    page = 1
    per_page = 20
    filter_start_date = nil
    filter_start_datetime = nil
    filter_type = APIHelper.json_deserialize(
      '["catalog","default"]', false)
    direction = nil
    filter_ids = APIHelper.json_deserialize(
      '[1,2,3]', false)
    filter_archived_at = 'not_null'

    # Perform the API call through the SDK function
    result = @controller.list_all_component_price_points(
                                                         filter_date_field: filter_date_field,
                                                         filter_end_date: filter_end_date,
                                                         filter_end_datetime: filter_end_datetime,
                                                         include: include,
                                                         page: page,
                                                         per_page: per_page,
                                                         filter_start_date: filter_start_date,
                                                         filter_start_datetime: filter_start_datetime,
                                                         filter_type: filter_type,
                                                         direction: direction,
                                                         filter_ids: filter_ids,
                                                         filter_archived_at: filter_archived_at)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"price_points":[{"price_point":{"id":1,"name":"Auto-created","type":"d'\
      'efault","component_id":2,"handle":"auto-created","created_at":"2021-02-'\
      '21T11:05:57-05:00","updated_at":"2021-02-21T11:05:57-05:00","prices":[{'\
      '"id":3,"component_id":2,"starting_quantity":0,"ending_quantity":null,"u'\
      'nit_price":"1.0","price_point_id":1,"formatted_unit_price":"$1.00","seg'\
      'ment_id":null}]}}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

end