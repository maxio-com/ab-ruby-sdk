# maxio_advanced_billing_formerly_chargify_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class ProductPricePointsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.product_price_points
    @response_catcher = @controller.http_call_back
  end

  # This method allows retrieval of a list of Products Price Points belonging to a Site.
  def test_list_all_product_price_points
    # Parameters for the API call
    direction = nil
    filter_archived_at = 'not_null'
    filter_date_field = 'updated_at'
    filter_end_date = nil
    filter_end_datetime = nil
    filter_ids = APIHelper.json_deserialize(
      '[1,2,3]', false)
    filter_start_date = nil
    filter_start_datetime = nil
    filter_type = APIHelper.json_deserialize(
      '["catalog","default"]', false)
    include = 'currency_prices'
    page = 1
    per_page = 20

    # Perform the API call through the SDK function
    result = @controller.list_all_product_price_points(direction: direction,
                                                       filter_archived_at: filter_archived_at,
                                                       filter_date_field: filter_date_field,
                                                       filter_end_date: filter_end_date,
                                                       filter_end_datetime: filter_end_datetime,
                                                       filter_ids: filter_ids,
                                                       filter_start_date: filter_start_date,
                                                       filter_start_datetime: filter_start_datetime,
                                                       filter_type: filter_type,
                                                       include: include,
                                                       page: page,
                                                       per_page: per_page)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"price_points":[{"id":0,"name":"My pricepoint","handle":"handle","pric'\
      'e_in_cents":10,"interval":5,"interval_unit":"month","trial_price_in_cen'\
      'ts":10,"trial_interval":1,"trial_interval_unit":"month","trial_type":"p'\
      'ayment_expected","introductory_offer":true,"initial_charge_in_cents":0,'\
      '"initial_charge_after_trial":true,"expiration_interval":0,"expiration_i'\
      'nterval_unit":"month","product_id":1230,"created_at":"2021-04-02T17:52:'\
      '09-04:00","updated_at":"2021-04-02T17:52:09-04:00","use_site_exchange_r'\
      'ate":true}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

end