# maxio_advanced_billing_formerly_chargify_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class CouponsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.coupons
    @response_catcher = @controller.http_call_back
  end

  # You can search for a coupon via the API with the find method. By passing a code parameter, the find will attempt to locate a coupon that matches that code. If no coupon is found, a 404 is returned.
  #
  #If you have more than one product family and if the coupon you are trying to find does not belong to the default product family in your site, then you will need to specify (either in the url or as a query string param) the product family id.
  def test_read_coupon_by_code
    # Parameters for the API call
    product_family_id = nil
    code = nil

    # Perform the API call through the SDK function
    result = @controller.read_coupon_by_code(
                                             product_family_id: product_family_id,
                                             code: code)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # You can retrieve a list of coupons.
  #
  #If the coupon is set to `use_site_exchange_rate: true`, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.
  def test_list_coupons
    # Parameters for the API call
    page = 1
    per_page = 30
    date_field = 'updated_at'
    start_date = nil
    end_date = nil
    start_datetime = nil
    end_datetime = nil
    filter_ids = APIHelper.json_deserialize(
      '[1,2,3]', false)
    filter_codes = APIHelper.json_deserialize(
      '["free","free_trial"]', false)
    currency_prices = true
    filter_end_date = nil
    filter_end_datetime = nil
    filter_start_date = nil
    filter_start_datetime = nil
    filter_date_field = 'updated_at'
    filter_use_site_exchange_rate = true

    # Perform the API call through the SDK function
    result = @controller.list_coupons(page: page, per_page: per_page,
                                      date_field: date_field,
                                      start_date: start_date,
                                      end_date: end_date,
                                      start_datetime: start_datetime,
                                      end_datetime: end_datetime,
                                      filter_ids: filter_ids,
                                      filter_codes: filter_codes,
                                      currency_prices: currency_prices,
                                      filter_end_date: filter_end_date,
                                      filter_end_datetime: filter_end_datetime,
                                      filter_start_date: filter_start_date,
                                      filter_start_datetime: filter_start_datetime,
                                      filter_date_field: filter_date_field,
                                      filter_use_site_exchange_rate: filter_use_site_exchange_rate)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '[{"coupon":{"id":0,"name":"string","code":"string","description":"strin'\
      'g","amount":0,"amount_in_cents":0,"product_family_id":0,"product_family'\
      '_name":"string","start_date":"string","end_date":"string","percentage":'\
      '0,"recurring":true,"recurring_scheme":"do_not_recur","duration_period_c'\
      'ount":0,"duration_interval":0,"duration_interval_unit":"string","durati'\
      'on_interval_span":"string","allow_negative_balance":true,"archived_at":'\
      '"string","conversion_limit":"string","stackable":true,"compounding_stra'\
      'tegy":"compound","use_site_exchange_rate":true,"created_at":"string","u'\
      'pdated_at":"string","discount_type":"amount","exclude_mid_period_alloca'\
      'tions":true,"apply_on_cancel_at_end_of_period ":true,"coupon_restrictio'\
      'ns":[{"id":"string","item_type":"Component","item_id":0,"name":"string"'\
      ',"handle":"string"}]}}]'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

end