# maxio_advanced_billing_formerly_chargify_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class SitesControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.sites
    @response_catcher = @controller.http_call_back
  end

  # This endpoint allows you to fetch some site data.
  #
  #Full documentation on Sites in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407870738587).
  #
  #Specifically, the [Clearing Site Data](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405428327309) section is extremely relevant to this endpoint documentation.
  #
  ##### Relationship invoicing enabled
  #If site has RI enabled then you will see more settings like:
  #
  #    "customer_hierarchy_enabled": true,
  #    "whopays_enabled": true,
  #    "whopays_default_payer": "self"
  #You can read more about these settings here:
  # [Who Pays & Customer Hierarchy](https://chargify.zendesk.com/hc/en-us/articles/4407746683291)
  def test_read_site

    # Perform the API call through the SDK function
    result = @controller.read_site()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"site":{"id":0,"name":"string","subdomain":"string","currency":"string'\
      '","seller_id":0,"non_primary_currencies":["string"],"relationship_invoi'\
      'cing_enabled":true,"customer_hierarchy_enabled":true,"whopays_enabled":'\
      'true,"whopays_default_payer":"string","default_payment_collection_metho'\
      'd":"string","organization_address":{"street":null,"line2":null,"city":n'\
      'ull,"state":null,"zip":null,"country":null,"name":"string","phone":"str'\
      'ing"},"tax_configuration":{"kind":"custom","fully_configured":true,"des'\
      'tination_address":"shipping_then_billing"},"net_terms":{"default_net_te'\
      'rms":0,"automatic_net_terms":0,"remittance_net_terms":0,"net_terms_on_r'\
      'emittance_signups_enabled":false,"custom_net_terms_enabled":false},"tes'\
      't":true}}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

  # This call is asynchronous and there may be a delay before the site data is fully deleted. If you are clearing site data for an automated test, you will need to build in a delay and/or check that there are no products, etc., in the site before proceeding.
  #
  #**This functionality will only work on sites in TEST mode. Attempts to perform this on sites in “live” mode will result in a response of 403 FORBIDDEN.**
  #
  def test_clear_site
    # Parameters for the API call
    cleanup_scope = 'all'

    # Perform the API call through the SDK function
    @controller.clear_site(cleanup_scope: cleanup_scope)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # This endpoint returns public keys used for Chargify.js.
  def test_list_chargify_js_public_keys
    # Parameters for the API call
    page = 1
    per_page = 20

    # Perform the API call through the SDK function
    result = @controller.list_chargify_js_public_keys(page: page,
                                                      per_page: per_page)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"chargify_js_keys":[{"public_key":"chjs_ftrxt7c4fv6f74wchjs_5zyn7gnwv"'\
      ',"requires_security_token":false,"created_at":"2021-01-01T05:00:00-04:0'\
      '0"}],"meta":{"total_count":1,"current_page":1,"total_pages":1,"per_page'\
      '":10}}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

end