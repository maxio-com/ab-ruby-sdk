# maxio_advanced_billing_formerly_chargify_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class OffersControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.offers
    @response_catcher = @controller.http_call_back
  end

  # Create an offer within your Chargify site by sending a POST request.
  #
  ### Documentation
  #
  #Offers allow you to package complicated combinations of products, components and coupons into a convenient package which can then be subscribed to just like products.
  #
  #Once an offer is defined it can be used as an alternative to the product when creating subscriptions.
  #
  #Full documentation on how to use offers in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407753852059).
  #
  ### Using a Product Price Point
  #
  #You can optionally pass in a `product_price_point_id` that corresponds with the `product_id` and the offer will use that price point. If a `product_price_point_id` is not passed in, the product's default price point will be used.
  def test_create_offer
    # Parameters for the API call
    body = CreateOfferRequest.from_hash(APIHelper.json_deserialize(
      '{"offer":{"name":"Solo","handle":"han_shot_first","description":"A Star'\
      ' Wars Story","product_id":31,"product_price_point_id":102,"components":'\
      '[{"component_id":24,"starting_quantity":1}],"coupons":["DEF456"]}}', false))

    # Perform the API call through the SDK function
    result = @controller.create_offer(body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"offer":{"id":3,"site_id":2,"product_family_id":4,"product_family_name'\
      '":"Chargify","product_id":31,"product_name":"30-Day Square Trial","prod'\
      'uct_price_in_cents":2000,"product_revisable_number":0,"name":"Solo","ha'\
      'ndle":"han_shot_first","description":"A Star Wars Story","created_at":"'\
      '2018-06-08T14:51:52-04:00","updated_at":"2018-06-08T14:51:52-04:00","ar'\
      'chived_at":null,"product_price_point_name":"Default","offer_items":[{"c'\
      'omponent_id":24,"component_name":"Invoices","component_unit_price":"3.0'\
      '","price_point_id":104,"price_point_name":"Original","starting_quantity'\
      '":"1.0","editable":false}],"offer_discounts":[{"coupon_id":3,"coupon_co'\
      'de":"DEF456","coupon_name":"IB Loyalty"}]}}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

  # This endpoint will list offers for a site.
  def test_list_offers

    # Perform the API call through the SDK function
    result = @controller.list_offers()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"offers":[{"id":239,"site_id":48110,"product_family_id":1025627,"produ'\
      'ct_family_name":"Gold","product_id":110,"product_name":"Pro","product_p'\
      'rice_in_cents":1000,"product_revisable_number":0,"product_price_point_i'\
      'd":138,"product_price_point_name":"Default","name":"Third Offer","handl'\
      'e":"third","description":"","created_at":"2018-08-03T09:56:11-05:00","u'\
      'pdated_at":"2018-08-03T09:56:11-05:00","archived_at":null,"offer_items"'\
      ':[{"component_id":426665,"component_name":"Database Size (GB)","compone'\
      'nt_unit_price":"1.0","price_point_id":149438,"price_point_name":"Auto-c'\
      'reated","starting_quantity":"0.0","editable":false,"currency_prices":[]'\
      '}],"offer_discounts":[{"coupon_id":234,"coupon_code":"GR8_CUSTOMER","co'\
      'upon_name":"Multi-service Discount"}],"offer_signup_pages":[{"id":35648'\
      '2,"nickname":"ggoods","enabled":true,"return_url":"","return_params":""'\
      ',"url":"https://general-goods.chargifypay.com/subscribe/hjpvhnw63tzy"}]'\
      '}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

end