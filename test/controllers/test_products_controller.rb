# maxio_advanced_billing_formerly_chargify_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class ProductsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.products
    @response_catcher = @controller.http_call_back
  end

  # This method allows to retrieve a list of Products belonging to a Site.
  def test_list_products
    # Parameters for the API call
    date_field = 'updated_at'
    end_date = nil
    end_datetime = nil
    start_date = nil
    start_datetime = nil
    page = 1
    per_page = 20
    include_archived = true
    include = 'prepaid_product_price_point'
    filter_prepaid_product_price_point_product_price_point_id = 'not_null'
    filter_use_site_exchange_rate = true

    # Perform the API call through the SDK function
    result = @controller.list_products(date_field: date_field,
                                       end_date: end_date,
                                       end_datetime: end_datetime,
                                       start_date: start_date,
                                       start_datetime: start_datetime,
                                       page: page, per_page: per_page,
                                       include_archived: include_archived,
                                       include: include,
                                       filter_prepaid_product_price_point_product_price_point_id: filter_prepaid_product_price_point_product_price_point_id,
                                       filter_use_site_exchange_rate: filter_use_site_exchange_rate)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '[{"product":{"id":0,"name":"string","handle":"string","description":"st'\
      'ring","accounting_code":"string","request_credit_card":true,"expiration'\
      '_interval":0,"expiration_interval_unit":"month","created_at":"string","'\
      'updated_at":"string","price_in_cents":0,"interval":0,"interval_unit":"m'\
      'onth","initial_charge_in_cents":0,"trial_price_in_cents":0,"trial_inter'\
      'val":0,"trial_interval_unit":"month","archived_at":"string","require_cr'\
      'edit_card":true,"return_params":"string","taxable":true,"update_return_'\
      'url":"string","initial_charge_after_trial":true,"version_number":0,"upd'\
      'ate_return_params":"string","product_family":{"id":0,"name":"string","h'\
      'andle":"string","accounting_code":null,"description":"string","created_'\
      'at":"string","updated_at":"string"},"public_signup_pages":[{"id":0,"ret'\
      'urn_url":"string","return_params":"string","url":"string"}],"product_pr'\
      'ice_point_name":"string","request_billing_address":true,"require_billin'\
      'g_address":true,"require_shipping_address":true,"use_site_exchange_rate'\
      '":true,"tax_code":"string","default_product_price_point_id":0}}]'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

end