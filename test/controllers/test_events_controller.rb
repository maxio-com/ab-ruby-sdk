# maxio_advanced_billing_formerly_chargify_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class EventsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.events
    @response_catcher = @controller.http_call_back
  end

  # ## Events Intro
  #
  #Chargify Events include various activity that happens around a Site. This information is **especially** useful to track down issues that arise when subscriptions are not created due to errors.
  #
  #Within the Chargify UI, "Events" are referred to as "Site Activity".  Full documentation on how to record view Events / Site Activty in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407864698139).
  #
  ### List Events for a Site
  #
  #This method will retrieve a list of events for a site. Use query string filters to narrow down results. You may use the `key` filter as part of your query string to narrow down results.
  #
  #### Legacy Filters
  #
  #The following keys are no longer supported.
  #
  #+ `payment_failure_recreated`
  #+ `payment_success_recreated`
  #+ `renewal_failure_recreated`
  #+ `renewal_success_recreated`
  #+ `zferral_revenue_post_failure` - (Specific to the deprecated Zferral integration)
  #+ `zferral_revenue_post_success` - (Specific to the deprecated Zferral integration)
  #
  ### Event Specific Data
  #
  #Event Specific Data
  #
  #Each event type has its own `event_specific_data` specified.
  #
  #Here’s an example event for the `subscription_product_change` event:
  #
  #```
  #{
  #    "event": {
  #        "id": 351,
  #        "key": "subscription_product_change",
  #        "message": "Product changed on Marky Mark's subscription from 'Basic' to 'Pro'",
  #        "subscription_id": 205,
  #        "event_specific_data": {
  #            "new_product_id": 3,
  #            "previous_product_id": 2
  #        },
  #        "created_at": "2012-01-30T10:43:31-05:00"
  #    }
  #}
  #```
  #
  #Here’s an example event for the `subscription_state_change` event:
  #
  #```
  # {
  #     "event": {
  #         "id": 353,
  #         "key": "subscription_state_change",
  #         "message": "State changed on Marky Mark's subscription to Pro from trialing to active",
  #         "subscription_id": 205,
  #         "event_specific_data": {
  #             "new_subscription_state": "active",
  #             "previous_subscription_state": "trialing"
  #         },
  #         "created_at": "2012-01-30T10:43:33-05:00"
  #     }
  # }
  #```
  def test_list_events
    # Parameters for the API call
    page = 1
    per_page = 20
    since_id = nil
    max_id = nil
    direction = 'desc'
    filter = APIHelper.json_deserialize(
      '["custom_field_value_change","payment_success"]', false)
    date_field = 'created_at'
    start_date = nil
    end_date = nil
    start_datetime = nil
    end_datetime = nil

    # Perform the API call through the SDK function
    result = @controller.list_events(page: page, per_page: per_page,
                                     since_id: since_id, max_id: max_id,
                                     direction: direction, filter: filter,
                                     date_field: date_field,
                                     start_date: start_date, end_date: end_date,
                                     start_datetime: start_datetime,
                                     end_datetime: end_datetime)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '[{"event":{"id":343087780,"key":"subscription_state_change","message":"'\
      'State changed on Test subscription to Monthly Product from active to pa'\
      'st_due","subscription_id":14950962,"created_at":"2016-10-27T16:42:22-04'\
      ':00","event_specific_data":{"previous_subscription_state":"active","new'\
      '_subscription_state":"past_due"}}},{"event":{"id":343087742,"key":"bill'\
      'ing_date_change","message":"Billing date changed on Test\'s subscriptio'\
      'n to Monthly Product from 11/27/2016 to 10/27/2016","subscription_id":1'\
      '4950962,"created_at":"2016-10-27T16:42:19-04:00","event_specific_data":'\
      'null}},{"event":{"id":343085267,"key":"statement_closed","message":"Sta'\
      'tement 79401838 closed (but not settled) for Test\'s subscription to AN'\
      'NUAL product","subscription_id":14950975,"created_at":"2016-10-27T16:40'\
      ':40-04:00","event_specific_data":null}},{"event":{"id":4481,"key":"cust'\
      'om_field_value_change","message":"Custom field (Extra support included)'\
      ' changed for Subscription 117 from \'Yes\' to \'No\'.","subscription_id'\
      '":117,"customer_id":null,"created_at":"2022-03-24T07:55:06-04:00","even'\
      't_specific_data":{"event_type":"updated","metafield_name":"Extra suppor'\
      't included","metafield_id":2,"old_value":"Yes","new_value":"No","resour'\
      'ce_type":"Subscription","resource_id":117,"previous_subscription_state"'\
      ':"active","new_subscription_state":"past_due"}}}]'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

  # ## Events Intro
  #
  #Chargify Events include various activity that happens around a Site. This information is **especially** useful to track down issues that arise when subscriptions are not created due to errors.
  #
  #Within the Chargify UI, "Events" are referred to as "Site Activity".  Full documentation on how to record view Events / Site Activty in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407864698139).
  #
  ### List Events for a Site
  #
  #This method will retrieve a list of events for a site. Use query string filters to narrow down results. You may use the `key` filter as part of your query string to narrow down results.
  #
  #### Legacy Filters
  #
  #The following keys are no longer supported.
  #
  #+ `payment_failure_recreated`
  #+ `payment_success_recreated`
  #+ `renewal_failure_recreated`
  #+ `renewal_success_recreated`
  #+ `zferral_revenue_post_failure` - (Specific to the deprecated Zferral integration)
  #+ `zferral_revenue_post_success` - (Specific to the deprecated Zferral integration)
  #
  ### Event Specific Data
  #
  #Event Specific Data
  #
  #Each event type has its own `event_specific_data` specified.
  #
  #Here’s an example event for the `subscription_product_change` event:
  #
  #```
  #{
  #    "event": {
  #        "id": 351,
  #        "key": "subscription_product_change",
  #        "message": "Product changed on Marky Mark's subscription from 'Basic' to 'Pro'",
  #        "subscription_id": 205,
  #        "event_specific_data": {
  #            "new_product_id": 3,
  #            "previous_product_id": 2
  #        },
  #        "created_at": "2012-01-30T10:43:31-05:00"
  #    }
  #}
  #```
  #
  #Here’s an example event for the `subscription_state_change` event:
  #
  #```
  # {
  #     "event": {
  #         "id": 353,
  #         "key": "subscription_state_change",
  #         "message": "State changed on Marky Mark's subscription to Pro from trialing to active",
  #         "subscription_id": 205,
  #         "event_specific_data": {
  #             "new_subscription_state": "active",
  #             "previous_subscription_state": "trialing"
  #         },
  #         "created_at": "2012-01-30T10:43:33-05:00"
  #     }
  # }
  #```
  def test_list_events1
    # Parameters for the API call
    page = 1
    per_page = 20
    since_id = nil
    max_id = nil
    direction = 'desc'
    filter = APIHelper.json_deserialize(
      '["custom_field_value_change","payment_success"]', false)
    date_field = 'created_at'
    start_date = nil
    end_date = nil
    start_datetime = nil
    end_datetime = nil

    # Perform the API call through the SDK function
    result = @controller.list_events(page: page, per_page: per_page,
                                     since_id: since_id, max_id: max_id,
                                     direction: direction, filter: filter,
                                     date_field: date_field,
                                     start_date: start_date, end_date: end_date,
                                     start_datetime: start_datetime,
                                     end_datetime: end_datetime)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/xml'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # ## Events Intro
  #
  #Chargify Events include various activity that happens around a Site. This information is **especially** useful to track down issues that arise when subscriptions are not created due to errors.
  #
  #Within the Chargify UI, "Events" are referred to as "Site Activity".  Full documentation on how to record view Events / Site Activty in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407864698139).
  #
  ### List Events for a Site
  #
  #This method will retrieve a list of events for a site. Use query string filters to narrow down results. You may use the `key` filter as part of your query string to narrow down results.
  #
  #### Legacy Filters
  #
  #The following keys are no longer supported.
  #
  #+ `payment_failure_recreated`
  #+ `payment_success_recreated`
  #+ `renewal_failure_recreated`
  #+ `renewal_success_recreated`
  #+ `zferral_revenue_post_failure` - (Specific to the deprecated Zferral integration)
  #+ `zferral_revenue_post_success` - (Specific to the deprecated Zferral integration)
  #
  ### Event Specific Data
  #
  #Event Specific Data
  #
  #Each event type has its own `event_specific_data` specified.
  #
  #Here’s an example event for the `subscription_product_change` event:
  #
  #```
  #{
  #    "event": {
  #        "id": 351,
  #        "key": "subscription_product_change",
  #        "message": "Product changed on Marky Mark's subscription from 'Basic' to 'Pro'",
  #        "subscription_id": 205,
  #        "event_specific_data": {
  #            "new_product_id": 3,
  #            "previous_product_id": 2
  #        },
  #        "created_at": "2012-01-30T10:43:31-05:00"
  #    }
  #}
  #```
  #
  #Here’s an example event for the `subscription_state_change` event:
  #
  #```
  # {
  #     "event": {
  #         "id": 353,
  #         "key": "subscription_state_change",
  #         "message": "State changed on Marky Mark's subscription to Pro from trialing to active",
  #         "subscription_id": 205,
  #         "event_specific_data": {
  #             "new_subscription_state": "active",
  #             "previous_subscription_state": "trialing"
  #         },
  #         "created_at": "2012-01-30T10:43:33-05:00"
  #     }
  # }
  #```
  def test_list_events2
    # Parameters for the API call
    page = 1
    per_page = 20
    since_id = nil
    max_id = nil
    direction = 'desc'
    filter = APIHelper.json_deserialize(
      '["custom_field_value_change","payment_success"]', false)
    date_field = 'created_at'
    start_date = nil
    end_date = nil
    start_datetime = nil
    end_datetime = nil

    # Perform the API call through the SDK function
    result = @controller.list_events(page: page, per_page: per_page,
                                     since_id: since_id, max_id: max_id,
                                     direction: direction, filter: filter,
                                     date_field: date_field,
                                     start_date: start_date, end_date: end_date,
                                     start_datetime: start_datetime,
                                     end_datetime: end_datetime)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'multipart/form-data'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get a count of all the events for a given site by using this method.
  def test_read_events_count
    # Parameters for the API call
    page = 1
    per_page = 20
    since_id = nil
    max_id = nil
    direction = 'desc'
    filter = APIHelper.json_deserialize(
      '["custom_field_value_change","payment_success"]', false)

    # Perform the API call through the SDK function
    result = @controller.read_events_count(page: page, per_page: per_page,
                                           since_id: since_id, max_id: max_id,
                                           direction: direction, filter: filter)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"count":144}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

end