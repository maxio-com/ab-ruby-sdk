# maxio_advanced_billing_formerly_chargify_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class SubscriptionGroupsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.subscription_groups
    @response_catcher = @controller.http_call_back
  end

  # Create multiple subscriptions at once under the same customer and consolidate them into a subscription group.
  #
  #You must provide one and only one of the `payer_id`/`payer_reference`/`payer_attributes` for the customer attached to the group.
  #
  #You must provide one and only one of the `payment_profile_id`/`credit_card_attributes`/`bank_account_attributes` for the payment profile attached to the group.
  #
  #Only one of the `subscriptions` can have `"primary": true` attribute set.
  #
  #When passing product to a subscription you can use either `product_id` or `product_handle` or `offer_id`. You can also use `custom_price` instead.
  def test_signup_with_subscription_group
    # Parameters for the API call
    body = SubscriptionGroupSignupRequest.from_hash(APIHelper.json_deserialize(
      '{"subscription_group":{"payment_profile_id":123,"payer_id":123,"subscri'\
      'ptions":[{"product_id":11,"primary":true},{"product_id":12},{"product_i'\
      'd":13}]}}', false))

    # Perform the API call through the SDK function
    result = @controller.signup_with_subscription_group(body: body)

    # Test response code
    assert_equal(201, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Creates a subscription group with given members.
  def test_create_subscription_group
    # Parameters for the API call
    body = CreateSubscriptionGroupRequest.from_hash(APIHelper.json_deserialize(
      '{"subscription_group":{"subscription_id":1,"member_ids":[2,3,4]}}', false))

    # Perform the API call through the SDK function
    result = @controller.create_subscription_group(body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"subscription_group":{"customer_id":1,"payment_profile":{"id":1,"first'\
      '_name":"t","last_name":"t","masked_card_number":"XXXX-XXXX-XXXX-1"},"pa'\
      'yment_collection_method":"automatic","subscription_ids":[1,2],"created_'\
      'at":"2021-01-21T05:47:38-05:00"}}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

  # Returns an array of subscription groups for the site. The response is paginated and will return a `meta` key with pagination information.
  #
  ##### Account Balance Information
  #
  #Account balance information for the subscription groups is not returned by default. If this information is desired, the `include[]=account_balances` parameter must be provided with the request.
  def test_list_subscription_groups
    # Parameters for the API call
    page = 1
    per_page = 20
    include = nil

    # Perform the API call through the SDK function
    result = @controller.list_subscription_groups(page: page,
                                                  per_page: per_page,
                                                  include: include)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"subscription_groups":[{"uid":"grp_952mvqcnk53wq","scheme":1,"customer'\
      '_id":88498000,"payment_profile_id":93063018,"subscription_ids":[4276890'\
      '7,82370782],"primary_subscription_id":69844395,"next_assessment_at":"Su'\
      'n, 09 Aug 2020 15:59:06 EDT -04:00","state":"active","cancel_at_end_of_'\
      'period":false,"account_balances":{"prepayments":{"balance_in_cents":0},'\
      '"service_credits":{"balance_in_cents":0},"pending_discounts":{"balance_'\
      'in_cents":0}}}],"meta":{"current_page":1,"total_count":1}}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

end