# maxio_advanced_billing_formerly_chargify_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class SubscriptionComponentsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.subscription_components
    @response_catcher = @controller.http_call_back
  end

  # This request will list components applied to each subscription.
  def test_list_subscription_components_for_site
    # Parameters for the API call
    page = 1
    per_page = 20
    sort = 'updated_at'
    direction = nil
    date_field = 'updated_at'
    start_date = nil
    start_datetime = nil
    end_date = nil
    end_datetime = nil
    subscription_ids = APIHelper.json_deserialize(
      '[1,2,3]', false)
    price_point_ids = 'not_null'
    product_family_ids = APIHelper.json_deserialize(
      '[1,2,3]', false)
    include = 'subscription'
    filter_use_site_exchange_rate = true
    filter_currencies = APIHelper.json_deserialize(
      '["EUR","USD"]', false)
    filter_subscription_states = APIHelper.json_deserialize(
      '["active","canceled"]', false)
    filter_subscription_date_field = 'updated_at'
    filter_subscription_start_date = nil
    filter_subscription_start_datetime = nil
    filter_subscription_end_date = nil
    filter_subscription_end_datetime = nil

    # Perform the API call through the SDK function
    result = @controller.list_subscription_components_for_site(page: page,
                                                               per_page: per_page,
                                                               sort: sort,
                                                               direction: direction,
                                                               date_field: date_field,
                                                               start_date: start_date,
                                                               start_datetime: start_datetime,
                                                               end_date: end_date,
                                                               end_datetime: end_datetime,
                                                               subscription_ids: subscription_ids,
                                                               price_point_ids: price_point_ids,
                                                               product_family_ids: product_family_ids,
                                                               include: include,
                                                               filter_use_site_exchange_rate: filter_use_site_exchange_rate,
                                                               filter_currencies: filter_currencies,
                                                               filter_subscription_states: filter_subscription_states,
                                                               filter_subscription_date_field: filter_subscription_date_field,
                                                               filter_subscription_start_date: filter_subscription_start_date,
                                                               filter_subscription_start_datetime: filter_subscription_start_datetime,
                                                               filter_subscription_end_date: filter_subscription_end_date,
                                                               filter_subscription_end_datetime: filter_subscription_end_datetime)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

end