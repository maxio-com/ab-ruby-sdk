# maxio_advanced_billing_formerly_chargify_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class ReasonCodesControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.reason_codes
    @response_catcher = @controller.http_call_back
  end

  # # Reason Codes Intro
  #
  #ReasonCodes are a way to gain a high level view of why your customers are cancelling the subcription to your product or service.
  #
  #Add a set of churn reason codes to be displayed in-app and/or the Chargify Billing Portal. As your subscribers decide to cancel their subscription, learn why they decided to cancel.
  #
  ### Reason Code Documentation
  #
  #Full documentation on how Reason Codes operate within Chargify can be located under the following links.
  #
  #[Churn Reason Codes](https://chargify.zendesk.com/hc/en-us/articles/4407896775579#churn-reason-codes)
  #
  ### Create Reason Code
  #
  #This method gives a merchant the option to create a reason codes for a given Site.
  def test_create_reason_code
    # Parameters for the API call
    body = CreateReasonCodeRequest.from_hash(APIHelper.json_deserialize(
      '{"reason_code":{"code":"NOTHANKYOU","description":"No thank you!","posi'\
      'tion":5}}', false))

    # Perform the API call through the SDK function
    result = @controller.create_reason_code(body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # This method gives a merchant the option to retrieve a list of all of the current churn codes for a given site.
  def test_list_reason_codes
    # Parameters for the API call
    page = 1
    per_page = 20

    # Perform the API call through the SDK function
    result = @controller.list_reason_codes(page: page, per_page: per_page)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '[{"reason_code":{"id":2,"site_id":2,"code":"LARGE","description":"This '\
      'is too complicated","position":1,"created_at":"2017-02-16T16:49:07-05:0'\
      '0","updated_at":"2017-02-17T16:29:51-05:00"}},{"reason_code":{"id":1,"s'\
      'ite_id":2,"code":"CH1","description":"This doesnt meet my needs","posit'\
      'ion":2,"created_at":"2017-02-16T16:48:45-05:00","updated_at":"2017-02-1'\
      '7T16:29:59-05:00"}},{"reason_code":{"id":5,"site_id":2,"code":"HAN99","'\
      'description":"Hard to setup","position":3,"created_at":"2017-02-17T16:2'\
      '9:42-05:00","updated_at":"2017-02-17T16:29:59-05:00"}}]'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

end