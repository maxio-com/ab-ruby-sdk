# maxio_advanced_billing_formerly_chargify_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class InsightsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.insights
    @response_catcher = @controller.http_call_back
  end

  # The Stats API is a very basic view of some Site-level stats. This API call only answers with JSON responses. An XML version is not provided.
  #
  ### Stats Documentation
  #
  #There currently is not a complimentary matching set of documentation that compliments this endpoint. However, each Site's dashboard will reflect the summary of information provided in the Stats reposnse.
  #
  #```
  #https://subdomain.chargify.com/dashboard
  #```
  def test_read_site_stats

    # Perform the API call through the SDK function
    result = @controller.read_site_stats()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"seller_name":"Acme, Inc.","site_name":"Production","site_id":12345,"s'\
      'ite_currency":"USD","stats":{"total_subscriptions":120,"subscriptions_t'\
      'oday":4,"total_revenue":"$45,978.81","revenue_today":"$1,405.12","reven'\
      'ue_this_month":"$10,000.00","revenue_this_year":"$27,935.24"}}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

  # This endpoint returns your site's current MRR, including plan and usage breakouts.
  def test_read_mrr
    # Parameters for the API call
    at_time = nil
    subscription_id = nil

    # Perform the API call through the SDK function
    result = @controller.read_mrr(at_time: at_time,
                                  subscription_id: subscription_id)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"mrr":{"amount_in_cents":9915593,"amount_formatted":"$99,155.93","curr'\
      'ency":"USD","currency_symbol":"$","at_time":"2021-02-03T14:23:17-05:00"'\
      ',"breakouts":{"plan_amount_in_cents":9913593,"plan_amount_formatted":"$'\
      '99,135.93","usage_amount_in_cents":2000,"usage_amount_formatted":"$20.0'\
      '0"}}}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

  # This endpoint returns your site's MRR movements.
  #
  ### Understanding MRR movements
  #
  #This endpoint will aid in accessing your site's [MRR Report](https://chargify.zendesk.com/hc/en-us/articles/4407838249627) data.
  #
  #Whenever a subscription event occurs that causes your site's MRR to change (such as a signup or upgrade), we record an MRR movement. These records are accessible via the MRR Movements endpoint.
  #
  #Each MRR Movement belongs to a subscription and contains a timestamp, category, and an amount. `line_items` represent the subscription's product configuration at the time of the movement.
  #
  #### Plan & Usage Breakouts
  #
  #In the MRR Report UI, we support a setting to [include or exclude](https://chargify.zendesk.com/hc/en-us/articles/4407838249627#displaying-component-based-metered-usage-in-mrr) usage revenue. In the MRR APIs, responses include `plan` and `usage` breakouts.
  #
  #Plan includes revenue from:
  #* Products
  #* Quantity-Based Components
  #* On/Off Components
  #
  #Usage includes revenue from:
  #* Metered Components
  #* Prepaid Usage Components
  def test_read_mrr_movements
    # Parameters for the API call
    subscription_id = nil
    page = 1
    per_page = 10
    direction = nil

    # Perform the API call through the SDK function
    result = @controller.read_mrr_movements(subscription_id: subscription_id,
                                            page: page, per_page: per_page,
                                            direction: direction)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"mrr":{"page":0,"per_page":10,"total_pages":80,"total_entries":791,"cu'\
      'rrency":"USD","currency_symbol":"$","movements":[{"timestamp":"2014-12-'\
      '03T13:59:46-05:00","amount_in_cents":2173,"amount_formatted":"$21.73","'\
      'description":"Awesome Company signed up for Super Product ($21.73/mo)",'\
      '"category":"new_business","breakouts":{"plan_amount_in_cents":2173,"pla'\
      'n_amount_formatted":"$21.73","usage_amount_in_cents":0,"usage_amount_fo'\
      'rmatted":"$0.00"},"line_items":[{"product_id":306386,"component_id":0,"'\
      'price_point_id":3856987,"name":"string","mrr":2173,"mrr_movements":[{"a'\
      'mount":2173,"category":"new_business"}],"quantity":1,"prev_quantity":0,'\
      '"recurring":true}],"subscription_id":12355,"subscriber_name":"Amy Smith'\
      '"}]}}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

  # This endpoint returns your site's current MRR, including plan and usage breakouts split per subscription.
  def test_list_mrr_per_subscription
    # Parameters for the API call
    filter_subscription_ids = APIHelper.json_deserialize(
      '[1,2,3]', false)
    at_time = 'at_time=2022-01-10T10:00:00-05:00'
    page = 1
    per_page = 20
    direction = 'desc'

    # Perform the API call through the SDK function
    result = @controller.list_mrr_per_subscription(
                                                   filter_subscription_ids: filter_subscription_ids,
                                                   at_time: at_time, page: page,
                                                   per_page: per_page,
                                                   direction: direction)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

end