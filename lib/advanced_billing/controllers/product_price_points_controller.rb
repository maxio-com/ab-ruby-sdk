# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # ProductPricePointsController
  class ProductPricePointsController < BaseController
    # [Product Price Point
    # Documentation](https://chargify.zendesk.com/hc/en-us/articles/440775582415
    # 5)
    # @param [Integer | String] product_id Required parameter: The id or handle
    # of the product. When using the handle, it must be prefixed with
    # `handle:`
    # @param [CreateProductPricePointRequest] body Optional parameter:
    # Example:
    # @return [ProductPricePointResponse] response from the API call
    def create_product_price_point(product_id,
                                   body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/products/{product_id}/price_points.json',
                                     Server::DEFAULT)
                   .template_param(new_parameter(product_id, key: 'product_id')
                                    .is_required(true)
                                    .should_encode(true)
                                    .validator(proc do |value|
                                      UnionTypeLookUp.get(:CreateProductPricePointProductId)
                                                     .validate(value)
                                    end))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ProductPricePointResponse.method(:from_hash))
                   .local_error_template('422',
                                         'HTTP Response Not OK. Status code: {$statusCode}.'\
                                          ' Response: \'{$response.body}\'.',
                                         ProductPricePointErrorResponseException))
        .execute
    end

    # Use this endpoint to retrieve a list of product price points.
    # @param [Integer | String] product_id Required parameter: The id or handle
    # of the product. When using the handle, it must be prefixed with
    # `handle:`
    # @param [Integer] page Optional parameter: Result records are organized in
    # pages. By default, the first page of results is displayed. The page
    # parameter specifies a page number of results to fetch. You can start
    # navigating through the pages to consume the results. You do this by
    # passing in a page parameter. Retrieve the next page by adding ?page=2 to
    # the query string. If there are no results to return, then an empty result
    # set will be returned. Use in query `page=1`.
    # @param [Integer] per_page Optional parameter: This parameter indicates how
    # many records to fetch in each request. Default value is 10. The maximum
    # allowed values is 200; any per_page value over 200 will be changed to
    # 200.
    # @param [TrueClass | FalseClass] currency_prices Optional parameter: When
    # fetching a product's price points, if you have defined multiple currencies
    # at the site level, you can optionally pass the ?currency_prices=true query
    # param to include an array of currency price data in the response. If the
    # product price point is set to use_site_exchange_rate: true, it will return
    # pricing based on the current exchange rate. If the flag is set to false,
    # it will return all of the defined prices for each currency.
    # @param [Array[PricePointType]] filter_type Optional parameter: Use in
    # query: `filter[type]=catalog,default`.
    # @return [ListProductPricePointsResponse] response from the API call
    def list_product_price_points(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/products/{product_id}/price_points.json',
                                     Server::DEFAULT)
                   .template_param(new_parameter(options['product_id'], key: 'product_id')
                                    .is_required(true)
                                    .should_encode(true)
                                    .validator(proc do |value|
                                      UnionTypeLookUp.get(:ListProductPricePointsInputProductId)
                                                     .validate(value)
                                    end))
                   .query_param(new_parameter(options['page'], key: 'page'))
                   .query_param(new_parameter(options['per_page'], key: 'per_page'))
                   .query_param(new_parameter(options['currency_prices'], key: 'currency_prices'))
                   .query_param(new_parameter(options['filter_type'], key: 'filter[type]'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global'))

                   .array_serialization_format(ArraySerializationFormat::CSV))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ListProductPricePointsResponse.method(:from_hash)))
        .execute
    end

    # Use this endpoint to update a product price point.
    # Note: Custom product price points are not able to be updated.
    # @param [Integer | String] product_id Required parameter: The id or handle
    # of the product. When using the handle, it must be prefixed with
    # `handle:`
    # @param [Integer | String] price_point_id Required parameter: The id or
    # handle of the price point. When using the handle, it must be prefixed with
    # `handle:`
    # @param [UpdateProductPricePointRequest] body Optional parameter:
    # Example:
    # @return [ProductPricePointResponse] response from the API call
    def update_product_price_point(product_id,
                                   price_point_id,
                                   body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/products/{product_id}/price_points/{price_point_id}.json',
                                     Server::DEFAULT)
                   .template_param(new_parameter(product_id, key: 'product_id')
                                    .is_required(true)
                                    .should_encode(true)
                                    .validator(proc do |value|
                                      UnionTypeLookUp.get(:UpdateProductPricePointProductId)
                                                     .validate(value)
                                    end))
                   .template_param(new_parameter(price_point_id, key: 'price_point_id')
                                    .is_required(true)
                                    .should_encode(true)
                                    .validator(proc do |value|
                                      UnionTypeLookUp.get(:UpdateProductPricePointPricePointId)
                                                     .validate(value)
                                    end))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ProductPricePointResponse.method(:from_hash)))
        .execute
    end

    # Use this endpoint to retrieve details for a specific product price point.
    # @param [Integer | String] product_id Required parameter: The id or handle
    # of the product. When using the handle, it must be prefixed with
    # `handle:`
    # @param [Integer | String] price_point_id Required parameter: The id or
    # handle of the price point. When using the handle, it must be prefixed with
    # `handle:`
    # @param [TrueClass | FalseClass] currency_prices Optional parameter: When
    # fetching a product's price points, if you have defined multiple currencies
    # at the site level, you can optionally pass the ?currency_prices=true query
    # param to include an array of currency price data in the response. If the
    # product price point is set to use_site_exchange_rate: true, it will return
    # pricing based on the current exchange rate. If the flag is set to false,
    # it will return all of the defined prices for each currency.
    # @return [ProductPricePointResponse] response from the API call
    def read_product_price_point(product_id,
                                 price_point_id,
                                 currency_prices: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/products/{product_id}/price_points/{price_point_id}.json',
                                     Server::DEFAULT)
                   .template_param(new_parameter(product_id, key: 'product_id')
                                    .is_required(true)
                                    .should_encode(true)
                                    .validator(proc do |value|
                                      UnionTypeLookUp.get(:ReadProductPricePointProductId)
                                                     .validate(value)
                                    end))
                   .template_param(new_parameter(price_point_id, key: 'price_point_id')
                                    .is_required(true)
                                    .should_encode(true)
                                    .validator(proc do |value|
                                      UnionTypeLookUp.get(:ReadProductPricePointPricePointId)
                                                     .validate(value)
                                    end))
                   .query_param(new_parameter(currency_prices, key: 'currency_prices'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ProductPricePointResponse.method(:from_hash)))
        .execute
    end

    # Use this endpoint to archive a product price point.
    # @param [Integer | String] product_id Required parameter: The id or handle
    # of the product. When using the handle, it must be prefixed with
    # `handle:`
    # @param [Integer | String] price_point_id Required parameter: The id or
    # handle of the price point. When using the handle, it must be prefixed with
    # `handle:`
    # @return [ProductPricePointResponse] response from the API call
    def archive_product_price_point(product_id,
                                    price_point_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/products/{product_id}/price_points/{price_point_id}.json',
                                     Server::DEFAULT)
                   .template_param(new_parameter(product_id, key: 'product_id')
                                    .is_required(true)
                                    .should_encode(true)
                                    .validator(proc do |value|
                                      UnionTypeLookUp.get(:ArchiveProductPricePointProductId)
                                                     .validate(value)
                                    end))
                   .template_param(new_parameter(price_point_id, key: 'price_point_id')
                                    .is_required(true)
                                    .should_encode(true)
                                    .validator(proc do |value|
                                      UnionTypeLookUp.get(:ArchiveProductPricePointPricePointId)
                                                     .validate(value)
                                    end))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ProductPricePointResponse.method(:from_hash))
                   .local_error_template('422',
                                         'HTTP Response Not OK. Status code: {$statusCode}.'\
                                          ' Response: \'{$response.body}\'.',
                                         ErrorListResponseException))
        .execute
    end

    # Use this endpoint to unarchive an archived product price point.
    # @param [Integer] product_id Required parameter: The Chargify id of the
    # product to which the price point belongs
    # @param [Integer] price_point_id Required parameter: The Chargify id of the
    # product price point
    # @return [ProductPricePointResponse] response from the API call
    def unarchive_product_price_point(product_id,
                                      price_point_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PATCH,
                                     '/products/{product_id}/price_points/{price_point_id}/unarchive.json',
                                     Server::DEFAULT)
                   .template_param(new_parameter(product_id, key: 'product_id')
                                    .is_required(true)
                                    .should_encode(true))
                   .template_param(new_parameter(price_point_id, key: 'price_point_id')
                                    .is_required(true)
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ProductPricePointResponse.method(:from_hash)))
        .execute
    end

    # Use this endpoint to make a product price point the default for the
    # product.
    # Note: Custom product price points are not able to be set as the default
    # for a product.
    # @param [Integer] product_id Required parameter: The Chargify id of the
    # product to which the price point belongs
    # @param [Integer] price_point_id Required parameter: The Chargify id of the
    # product price point
    # @return [ProductResponse] response from the API call
    def promote_product_price_point_to_default(product_id,
                                               price_point_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PATCH,
                                     '/products/{product_id}/price_points/{price_point_id}/default.json',
                                     Server::DEFAULT)
                   .template_param(new_parameter(product_id, key: 'product_id')
                                    .is_required(true)
                                    .should_encode(true))
                   .template_param(new_parameter(price_point_id, key: 'price_point_id')
                                    .is_required(true)
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ProductResponse.method(:from_hash)))
        .execute
    end

    # Use this endpoint to create multiple product price points in one request.
    # @param [Integer] product_id Required parameter: The Chargify id of the
    # product to which the price points belong
    # @param [BulkCreateProductPricePointsRequest] body Optional parameter:
    # Example:
    # @return [BulkCreateProductPricePointsResponse] response from the API call
    def create_product_price_points(product_id,
                                    body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/products/{product_id}/price_points/bulk.json',
                                     Server::DEFAULT)
                   .template_param(new_parameter(product_id, key: 'product_id')
                                    .is_required(true)
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(BulkCreateProductPricePointsResponse.method(:from_hash))
                   .local_error_template('422',
                                         'HTTP Response Not OK. Status code: {$statusCode}.'\
                                          ' Response: \'{$response.body}\'.',
                                         APIException))
        .execute
    end

    # This endpoint allows you to create currency prices for a given currency
    # that has been defined on the site level in your settings.
    # When creating currency prices, they need to mirror the structure of your
    # primary pricing. If the product price point defines a trial and/or setup
    # fee, each currency must also define a trial and/or setup fee.
    # Note: Currency Prices are not able to be created for custom product price
    # points.
    # @param [Integer] product_price_point_id Required parameter: The Chargify
    # id of the product price point
    # @param [CreateProductCurrencyPricesRequest] body Optional parameter:
    # Example:
    # @return [ProductPricePointCurrencyPrice] response from the API call
    def create_product_currency_prices(product_price_point_id,
                                       body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/product_price_points/{product_price_point_id}/currency_prices.json',
                                     Server::DEFAULT)
                   .template_param(new_parameter(product_price_point_id, key: 'product_price_point_id')
                                    .is_required(true)
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ProductPricePointCurrencyPrice.method(:from_hash))
                   .local_error_template('422',
                                         'HTTP Response Not OK. Status code: {$statusCode}.'\
                                          ' Response: \'{$response.body}\'.',
                                         ErrorMapResponseException))
        .execute
    end

    # This endpoint allows you to update the `price`s of currency prices for a
    # given currency that exists on the product price point.
    # When updating the pricing, it needs to mirror the structure of your
    # primary pricing. If the product price point defines a trial and/or setup
    # fee, each currency must also define a trial and/or setup fee.
    # Note: Currency Prices are not able to be updated for custom product price
    # points.
    # @param [Integer] product_price_point_id Required parameter: The Chargify
    # id of the product price point
    # @param [UpdateCurrencyPricesRequest] body Optional parameter: Example:
    # @return [ProductPricePointCurrencyPrice] response from the API call
    def update_product_currency_prices(product_price_point_id,
                                       body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/product_price_points/{product_price_point_id}/currency_prices.json',
                                     Server::DEFAULT)
                   .template_param(new_parameter(product_price_point_id, key: 'product_price_point_id')
                                    .is_required(true)
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ProductPricePointCurrencyPrice.method(:from_hash))
                   .local_error_template('422',
                                         'HTTP Response Not OK. Status code: {$statusCode}.'\
                                          ' Response: \'{$response.body}\'.',
                                         ErrorMapResponseException))
        .execute
    end

    # This method allows retrieval of a list of Products Price Points belonging
    # to a Site.
    # @param [SortingDirection] direction Optional parameter: Controls the order
    # in which results are returned. Use in query `direction=asc`.
    # @param [IncludeNotNull] filter_archived_at Optional parameter: Allows
    # fetching price points only if archived_at is present or not. Use in query:
    # `filter[archived_at]=not_null`.
    # @param [BasicDateField] filter_date_field Optional parameter: The type of
    # filter you would like to apply to your search. Use in query:
    # `filter[date_field]=created_at`.
    # @param [Date] filter_end_date Optional parameter: The end date (format
    # YYYY-MM-DD) with which to filter the date_field. Returns price points with
    # a timestamp up to and including 11:59:59PM in your site’s time zone on the
    # date specified.
    # @param [DateTime] filter_end_datetime Optional parameter: The end date and
    # time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field.
    # Returns price points with a timestamp at or before exact time provided in
    # query. You can specify timezone in query - otherwise your site's time zone
    # will be used. If provided, this parameter will be used instead of
    # end_date.
    # @param [Array[Integer]] filter_ids Optional parameter: Allows fetching
    # price points with matching id based on provided values. Use in query:
    # `filter[ids]=1,2,3`.
    # @param [Date] filter_start_date Optional parameter: The start date (format
    # YYYY-MM-DD) with which to filter the date_field. Returns price points with
    # a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on
    # the date specified.
    # @param [DateTime] filter_start_datetime Optional parameter: The start date
    # and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field.
    # Returns price points with a timestamp at or after exact time provided in
    # query. You can specify timezone in query - otherwise your site's time zone
    # will be used. If provided, this parameter will be used instead of
    # start_date.
    # @param [Array[PricePointType]] filter_type Optional parameter: Allows
    # fetching price points with matching type. Use in query:
    # `filter[type]=catalog,custom`.
    # @param [ListProductsPricePointsInclude] include Optional parameter: Allows
    # including additional data in the response. Use in query:
    # `include=currency_prices`.
    # @param [Integer] page Optional parameter: Result records are organized in
    # pages. By default, the first page of results is displayed. The page
    # parameter specifies a page number of results to fetch. You can start
    # navigating through the pages to consume the results. You do this by
    # passing in a page parameter. Retrieve the next page by adding ?page=2 to
    # the query string. If there are no results to return, then an empty result
    # set will be returned. Use in query `page=1`.
    # @param [Integer] per_page Optional parameter: This parameter indicates how
    # many records to fetch in each request. Default value is 20. The maximum
    # allowed values is 200; any per_page value over 200 will be changed to 200.
    # Use in query `per_page=200`.
    # @return [ListProductPricePointsResponse] response from the API call
    def list_all_product_price_points(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/products_price_points.json',
                                     Server::DEFAULT)
                   .query_param(new_parameter(options['direction'], key: 'direction'))
                   .query_param(new_parameter(options['filter_archived_at'], key: 'filter[archived_at]'))
                   .query_param(new_parameter(options['filter_date_field'], key: 'filter[date_field]'))
                   .query_param(new_parameter(options['filter_end_date'], key: 'filter[end_date]'))
                   .query_param(new_parameter(options['filter_end_datetime'], key: 'filter[end_datetime]'))
                   .query_param(new_parameter(options['filter_ids'], key: 'filter[ids]'))
                   .query_param(new_parameter(options['filter_start_date'], key: 'filter[start_date]'))
                   .query_param(new_parameter(options['filter_start_datetime'], key: 'filter[start_datetime]'))
                   .query_param(new_parameter(options['filter_type'], key: 'filter[type]'))
                   .query_param(new_parameter(options['include'], key: 'include'))
                   .query_param(new_parameter(options['page'], key: 'page'))
                   .query_param(new_parameter(options['per_page'], key: 'per_page'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global'))

                   .array_serialization_format(ArraySerializationFormat::CSV))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ListProductPricePointsResponse.method(:from_hash))
                   .local_error_template('422',
                                         'HTTP Response Not OK. Status code: {$statusCode}.'\
                                          ' Response: \'{$response.body}\'.',
                                         ErrorListResponseException))
        .execute
    end
  end
end
