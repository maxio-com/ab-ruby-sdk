# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # SubscriptionNotesController
  class SubscriptionNotesController < BaseController
    # Use the following method to create a note for a subscription.
    # ## How to Use Subscription Notes
    # Notes allow you to record information about a particular Subscription in a
    # free text format.
    # If you have structured data such as birth date, color, etc., consider
    # using Metadata instead.
    # Full documentation on how to use Notes in the Advanced Billing UI can be
    # located
    # [here](https://maxio.zendesk.com/hc/en-us/articles/24251712214413-Subscrip
    # tion-Summary-Overview).
    # @param [Integer] subscription_id Required parameter: The Chargify id of
    # the subscription
    # @param [UpdateSubscriptionNoteRequest] body Optional parameter: Example:
    # @return [SubscriptionNoteResponse] response from the API call.
    def create_subscription_note(subscription_id,
                                 body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/subscriptions/{subscription_id}/notes.json',
                                     Server::PRODUCTION)
                   .template_param(new_parameter(subscription_id, key: 'subscription_id')
                                    .is_required(true)
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(SubscriptionNoteResponse.method(:from_hash))
                    .local_error_template('422',
                                          'HTTP Response Not OK. Status code: {$statusCode}.'\
                                           ' Response: \'{$response.body}\'.',
                                          ErrorListResponseException))
        .execute
    end

    # Use this method to retrieve a list of Notes associated with a
    # Subscription. The response will be an array of Notes.
    # @param [Integer] subscription_id Required parameter: The Chargify id of
    # the subscription
    # @param [Integer] page Optional parameter: Result records are organized in
    # pages. By default, the first page of results is displayed. The page
    # parameter specifies a page number of results to fetch. You can start
    # navigating through the pages to consume the results. You do this by
    # passing in a page parameter. Retrieve the next page by adding ?page=2 to
    # the query string. If there are no results to return, then an empty result
    # set will be returned. Use in query `page=1`.
    # @param [Integer] per_page Optional parameter: This parameter indicates how
    # many records to fetch in each request. Default value is 20. The maximum
    # allowed values is 200; any per_page value over 200 will be changed to 200.
    # Use in query `per_page=200`.
    # @return [Array[SubscriptionNoteResponse]] response from the API call.
    def list_subscription_notes(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/subscriptions/{subscription_id}/notes.json',
                                     Server::PRODUCTION)
                   .template_param(new_parameter(options['subscription_id'], key: 'subscription_id')
                                    .is_required(true)
                                    .should_encode(true))
                   .query_param(new_parameter(options['page'], key: 'page'))
                   .query_param(new_parameter(options['per_page'], key: 'per_page'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(SubscriptionNoteResponse.method(:from_hash))
                    .is_response_array(true)
                    .local_error_template('422',
                                          'HTTP Response Not OK. Status code: {$statusCode}.'\
                                           ' Response: \'{$response.body}\'.',
                                          ErrorListResponseException))
        .execute
    end

    # Once you have obtained the ID of the note you wish to read, use this
    # method to show a particular note attached to a subscription.
    # @param [Integer] subscription_id Required parameter: The Chargify id of
    # the subscription
    # @param [Integer] note_id Required parameter: The Advanced Billing id of
    # the note
    # @return [SubscriptionNoteResponse] response from the API call.
    def read_subscription_note(subscription_id,
                               note_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/subscriptions/{subscription_id}/notes/{note_id}.json',
                                     Server::PRODUCTION)
                   .template_param(new_parameter(subscription_id, key: 'subscription_id')
                                    .is_required(true)
                                    .should_encode(true))
                   .template_param(new_parameter(note_id, key: 'note_id')
                                    .is_required(true)
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(SubscriptionNoteResponse.method(:from_hash)))
        .execute
    end

    # Use the following method to update a note for a Subscription.
    # @param [Integer] subscription_id Required parameter: The Chargify id of
    # the subscription
    # @param [Integer] note_id Required parameter: The Advanced Billing id of
    # the note
    # @param [UpdateSubscriptionNoteRequest] body Optional parameter: Example:
    # @return [SubscriptionNoteResponse] response from the API call.
    def update_subscription_note(subscription_id,
                                 note_id,
                                 body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/subscriptions/{subscription_id}/notes/{note_id}.json',
                                     Server::PRODUCTION)
                   .template_param(new_parameter(subscription_id, key: 'subscription_id')
                                    .is_required(true)
                                    .should_encode(true))
                   .template_param(new_parameter(note_id, key: 'note_id')
                                    .is_required(true)
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(SubscriptionNoteResponse.method(:from_hash))
                    .local_error_template('422',
                                          'HTTP Response Not OK. Status code: {$statusCode}.'\
                                           ' Response: \'{$response.body}\'.',
                                          ErrorListResponseException))
        .execute
    end

    # Use the following method to delete a note for a Subscription.
    # @param [Integer] subscription_id Required parameter: The Chargify id of
    # the subscription
    # @param [Integer] note_id Required parameter: The Advanced Billing id of
    # the note
    # @return [void] response from the API call.
    def delete_subscription_note(subscription_id,
                                 note_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/subscriptions/{subscription_id}/notes/{note_id}.json',
                                     Server::PRODUCTION)
                   .template_param(new_parameter(subscription_id, key: 'subscription_id')
                                    .is_required(true)
                                    .should_encode(true))
                   .template_param(new_parameter(note_id, key: 'note_id')
                                    .is_required(true)
                                    .should_encode(true))
                   .auth(Single.new('BasicAuth')))
        .response(new_response_handler
                    .is_response_void(true))
        .execute
    end
  end
end
