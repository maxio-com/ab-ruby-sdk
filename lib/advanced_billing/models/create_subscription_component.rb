# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # CreateSubscriptionComponent Model.
  class CreateSubscriptionComponent < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Object]
    attr_accessor :component_id

    # Used for on/off components only.
    # @return [TrueClass | FalseClass]
    attr_accessor :enabled

    # Used for metered and events based components.
    # @return [Integer]
    attr_accessor :unit_balance

    # Used for quantity based components.
    # @return [Integer]
    attr_accessor :allocated_quantity

    # Deprecated. Use `allocated_quantity` instead.
    # @return [Integer]
    attr_accessor :quantity

    # Deprecated. Use `allocated_quantity` instead.
    # @return [Object]
    attr_accessor :price_point_id

    # Create or update custom pricing unique to the subscription. Used in place
    # of `price_point_id`.
    # @return [ComponentCustomPrice]
    attr_accessor :custom_price

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['component_id'] = 'component_id'
      @_hash['enabled'] = 'enabled'
      @_hash['unit_balance'] = 'unit_balance'
      @_hash['allocated_quantity'] = 'allocated_quantity'
      @_hash['quantity'] = 'quantity'
      @_hash['price_point_id'] = 'price_point_id'
      @_hash['custom_price'] = 'custom_price'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        component_id
        enabled
        unit_balance
        allocated_quantity
        quantity
        price_point_id
        custom_price
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(component_id = SKIP,
                   enabled = SKIP,
                   unit_balance = SKIP,
                   allocated_quantity = SKIP,
                   quantity = SKIP,
                   price_point_id = SKIP,
                   custom_price = SKIP)
      @component_id = component_id unless component_id == SKIP
      @enabled = enabled unless enabled == SKIP
      @unit_balance = unit_balance unless unit_balance == SKIP
      @allocated_quantity = allocated_quantity unless allocated_quantity == SKIP
      @quantity = quantity unless quantity == SKIP
      @price_point_id = price_point_id unless price_point_id == SKIP
      @custom_price = custom_price unless custom_price == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      component_id = hash.key?('component_id') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:CreateSubscriptionComponentComponentId), hash['component_id']
      ) : SKIP
      enabled = hash.key?('enabled') ? hash['enabled'] : SKIP
      unit_balance = hash.key?('unit_balance') ? hash['unit_balance'] : SKIP
      allocated_quantity =
        hash.key?('allocated_quantity') ? hash['allocated_quantity'] : SKIP
      quantity = hash.key?('quantity') ? hash['quantity'] : SKIP
      price_point_id = hash.key?('price_point_id') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:CreateSubscriptionComponentPricePointId), hash['price_point_id']
      ) : SKIP
      custom_price = ComponentCustomPrice.from_hash(hash['custom_price']) if hash['custom_price']

      # Create object from extracted values.
      CreateSubscriptionComponent.new(component_id,
                                      enabled,
                                      unit_balance,
                                      allocated_quantity,
                                      quantity,
                                      price_point_id,
                                      custom_price)
    end

    # Validates an instance of the object from a given value.
    # @param [CreateSubscriptionComponent | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end
  end
end
