# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # Metafield Model.
  class Metafield < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # Warning: When updating a metafield's scope attribute, all scope attributes
    # must be passed. Partially complete scope attributes will override the
    # existing settings.
    # @return [MetafieldScope]
    attr_accessor :scope

    # the amount of subscriptions this metafield has been applied to in Chargify
    # @return [Integer]
    attr_accessor :data_count

    # the amount of subscriptions this metafield has been applied to in Chargify
    # @return [String]
    attr_accessor :input_type

    # the amount of subscriptions this metafield has been applied to in Chargify
    # @return [Array[String]]
    attr_accessor :enum

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['scope'] = 'scope'
      @_hash['data_count'] = 'data_count'
      @_hash['input_type'] = 'input_type'
      @_hash['enum'] = 'enum'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        name
        scope
        data_count
        input_type
        enum
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        enum
      ]
    end

    def initialize(id = SKIP,
                   name = SKIP,
                   scope = SKIP,
                   data_count = SKIP,
                   input_type = SKIP,
                   enum = SKIP)
      @id = id unless id == SKIP
      @name = name unless name == SKIP
      @scope = scope unless scope == SKIP
      @data_count = data_count unless data_count == SKIP
      @input_type = input_type unless input_type == SKIP
      @enum = enum unless enum == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      scope = MetafieldScope.from_hash(hash['scope']) if hash['scope']
      data_count = hash.key?('data_count') ? hash['data_count'] : SKIP
      input_type = hash.key?('input_type') ? hash['input_type'] : SKIP
      enum = hash.key?('enum') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:MetafieldEnum), hash['enum']
      ) : SKIP

      # Create object from extracted values.
      Metafield.new(id,
                    name,
                    scope,
                    data_count,
                    input_type,
                    enum)
    end

    # Validates an instance of the object from a given value.
    # @param [Metafield | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end
  end
end
