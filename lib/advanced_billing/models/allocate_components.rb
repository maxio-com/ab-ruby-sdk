# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # AllocateComponents Model.
  class AllocateComponents < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :proration_upgrade_scheme

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :proration_downgrade_scheme

    # TODO: Write general description for this method
    # @return [Array[CreateAllocationRequest]]
    attr_accessor :allocations

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :accrue_charge

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :upgrade_charge

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :downgrade_credit

    # (Optional) If not passed, the allocation(s) will use the payment
    # collection method on the subscription
    # @return [PaymentCollectionMethod1]
    attr_accessor :payment_collection_method

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['proration_upgrade_scheme'] = 'proration_upgrade_scheme'
      @_hash['proration_downgrade_scheme'] = 'proration_downgrade_scheme'
      @_hash['allocations'] = 'allocations'
      @_hash['accrue_charge'] = 'accrue_charge'
      @_hash['upgrade_charge'] = 'upgrade_charge'
      @_hash['downgrade_credit'] = 'downgrade_credit'
      @_hash['payment_collection_method'] = 'payment_collection_method'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        proration_upgrade_scheme
        proration_downgrade_scheme
        allocations
        accrue_charge
        upgrade_charge
        downgrade_credit
        payment_collection_method
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(proration_upgrade_scheme = 'no-prorate',
                   proration_downgrade_scheme = 'no-prorate',
                   allocations = SKIP,
                   accrue_charge = SKIP,
                   upgrade_charge = SKIP,
                   downgrade_credit = SKIP,
                   payment_collection_method = PaymentCollectionMethod1::AUTOMATIC)
      @proration_upgrade_scheme = proration_upgrade_scheme unless proration_upgrade_scheme == SKIP
      unless proration_downgrade_scheme == SKIP
        @proration_downgrade_scheme =
          proration_downgrade_scheme
      end
      @allocations = allocations unless allocations == SKIP
      @accrue_charge = accrue_charge unless accrue_charge == SKIP
      @upgrade_charge = upgrade_charge unless upgrade_charge == SKIP
      @downgrade_credit = downgrade_credit unless downgrade_credit == SKIP
      unless payment_collection_method == SKIP
        @payment_collection_method =
          payment_collection_method
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      proration_upgrade_scheme =
        hash['proration_upgrade_scheme'] ||= 'no-prorate'
      proration_downgrade_scheme =
        hash['proration_downgrade_scheme'] ||= 'no-prorate'
      # Parameter is an array, so we need to iterate through it
      allocations = nil
      unless hash['allocations'].nil?
        allocations = []
        hash['allocations'].each do |structure|
          allocations << (CreateAllocationRequest.from_hash(structure) if structure)
        end
      end

      allocations = SKIP unless hash.key?('allocations')
      accrue_charge = hash.key?('accrue_charge') ? hash['accrue_charge'] : SKIP
      upgrade_charge =
        hash.key?('upgrade_charge') ? hash['upgrade_charge'] : SKIP
      downgrade_credit =
        hash.key?('downgrade_credit') ? hash['downgrade_credit'] : SKIP
      payment_collection_method =
        hash['payment_collection_method'] ||= PaymentCollectionMethod1::AUTOMATIC

      # Create object from extracted values.
      AllocateComponents.new(proration_upgrade_scheme,
                             proration_downgrade_scheme,
                             allocations,
                             accrue_charge,
                             upgrade_charge,
                             downgrade_credit,
                             payment_collection_method)
    end
  end
end
