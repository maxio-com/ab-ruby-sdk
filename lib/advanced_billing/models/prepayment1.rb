# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # Prepayment1 Model.
  class Prepayment1 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :subscription_id

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :amount_in_cents

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :remaining_amount_in_cents

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :refunded_amount_in_cents

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :details

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :external

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :memo

    # The payment type of the prepayment.
    # @return [PrepaymentMethod]
    attr_accessor :payment_type

    # The payment type of the prepayment.
    # @return [String]
    attr_accessor :created_at

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['subscription_id'] = 'subscription_id'
      @_hash['amount_in_cents'] = 'amount_in_cents'
      @_hash['remaining_amount_in_cents'] = 'remaining_amount_in_cents'
      @_hash['refunded_amount_in_cents'] = 'refunded_amount_in_cents'
      @_hash['details'] = 'details'
      @_hash['external'] = 'external'
      @_hash['memo'] = 'memo'
      @_hash['payment_type'] = 'payment_type'
      @_hash['created_at'] = 'created_at'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        refunded_amount_in_cents
        details
        payment_type
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = nil,
                   subscription_id = nil,
                   amount_in_cents = nil,
                   remaining_amount_in_cents = nil,
                   external = nil,
                   memo = nil,
                   created_at = nil,
                   refunded_amount_in_cents = SKIP,
                   details = SKIP,
                   payment_type = SKIP)
      @id = id
      @subscription_id = subscription_id
      @amount_in_cents = amount_in_cents
      @remaining_amount_in_cents = remaining_amount_in_cents
      @refunded_amount_in_cents = refunded_amount_in_cents unless refunded_amount_in_cents == SKIP
      @details = details unless details == SKIP
      @external = external
      @memo = memo
      @payment_type = payment_type unless payment_type == SKIP
      @created_at = created_at
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : nil
      subscription_id =
        hash.key?('subscription_id') ? hash['subscription_id'] : nil
      amount_in_cents =
        hash.key?('amount_in_cents') ? hash['amount_in_cents'] : nil
      remaining_amount_in_cents =
        hash.key?('remaining_amount_in_cents') ? hash['remaining_amount_in_cents'] : nil
      external = hash.key?('external') ? hash['external'] : nil
      memo = hash.key?('memo') ? hash['memo'] : nil
      created_at = hash.key?('created_at') ? hash['created_at'] : nil
      refunded_amount_in_cents =
        hash.key?('refunded_amount_in_cents') ? hash['refunded_amount_in_cents'] : SKIP
      details = hash.key?('details') ? hash['details'] : SKIP
      payment_type = hash.key?('payment_type') ? hash['payment_type'] : SKIP

      # Create object from extracted values.
      Prepayment1.new(id,
                      subscription_id,
                      amount_in_cents,
                      remaining_amount_in_cents,
                      external,
                      memo,
                      created_at,
                      refunded_amount_in_cents,
                      details,
                      payment_type)
    end
  end
end
