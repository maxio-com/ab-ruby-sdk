# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # Create or update custom pricing unique to the subscription. Used in place of
  # `price_point_id`.
  class ComponentCustomPrice < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Whether or not the price point includes tax
    # @return [TrueClass | FalseClass]
    attr_accessor :tax_included

    # Omit for On/Off components
    # @return [PricingScheme]
    attr_accessor :pricing_scheme

    # The numerical interval. i.e. an interval of ‘30’ coupled with an
    # interval_unit of day would mean this component price point would renew
    # every 30 days. This property is only available for sites with
    # Multifrequency enabled.
    # @return [Integer]
    attr_accessor :interval

    # A string representing the interval unit for this component price point,
    # either month or day. This property is only available for sites with
    # Multifrequency enabled.
    # @return [IntervalUnit]
    attr_accessor :interval_unit

    # On/off components only need one price bracket starting at 1
    # @return [Array[Price]]
    attr_accessor :prices

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['tax_included'] = 'tax_included'
      @_hash['pricing_scheme'] = 'pricing_scheme'
      @_hash['interval'] = 'interval'
      @_hash['interval_unit'] = 'interval_unit'
      @_hash['prices'] = 'prices'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        tax_included
        pricing_scheme
        interval
        interval_unit
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        interval_unit
      ]
    end

    def initialize(prices:, tax_included: SKIP, pricing_scheme: SKIP,
                   interval: SKIP, interval_unit: SKIP,
                   additional_properties = nil)
      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end

      @tax_included = tax_included unless tax_included == SKIP
      @pricing_scheme = pricing_scheme unless pricing_scheme == SKIP
      @interval = interval unless interval == SKIP
      @interval_unit = interval_unit unless interval_unit == SKIP
      @prices = prices
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      prices = nil
      unless hash['prices'].nil?
        prices = []
        hash['prices'].each do |structure|
          prices << (Price.from_hash(structure) if structure)
        end
      end

      prices = nil unless hash.key?('prices')
      tax_included = hash.key?('tax_included') ? hash['tax_included'] : SKIP
      pricing_scheme =
        hash.key?('pricing_scheme') ? hash['pricing_scheme'] : SKIP
      interval = hash.key?('interval') ? hash['interval'] : SKIP
      interval_unit = hash.key?('interval_unit') ? hash['interval_unit'] : SKIP

      # Clean out expected properties from Hash.
      additional_properties = hash.reject { |k, _| names.value?(k) }

      # Create object from extracted values.
      ComponentCustomPrice.new(prices: prices,
                               tax_included: tax_included,
                               pricing_scheme: pricing_scheme,
                               interval: interval,
                               interval_unit: interval_unit,
                               additional_properties: additional_properties)
    end

    # Validates an instance of the object from a given value.
    # @param [ComponentCustomPrice | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return APIHelper.valid_type?(value.prices,
                                     ->(val) { Price.validate(val) },
                                     is_model_hash: true,
                                     is_inner_model_hash: true)
      end

      return false unless value.instance_of? Hash

      APIHelper.valid_type?(value['prices'],
                            ->(val) { Price.validate(val) },
                            is_model_hash: true,
                            is_inner_model_hash: true)
    end
  end
end
