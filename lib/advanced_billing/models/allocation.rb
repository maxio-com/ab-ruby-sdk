# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module AdvancedBilling
  # Allocation Model.
  class Allocation < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The allocation unique id
    # @return [Integer]
    attr_accessor :allocation_id

    # The integer component ID for the allocation. This references a component
    # that you have created in your Product setup
    # @return [Integer]
    attr_accessor :component_id

    # The handle of the component. This references a component that you have
    # created in your Product setup
    # @return [String]
    attr_accessor :component_handle

    # The integer subscription ID for the allocation. This references a unique
    # subscription in your Site
    # @return [Integer]
    attr_accessor :subscription_id

    # The allocated quantity set in to effect by the allocation. String for
    # components supporting fractional quantities
    # @return [Object]
    attr_accessor :quantity

    # The allocated quantity that was in effect before this allocation was
    # created. String for components supporting fractional quantities
    # @return [Object]
    attr_accessor :previous_quantity

    # The memo passed when the allocation was created
    # @return [String]
    attr_accessor :memo

    # The time that the allocation was recorded, in format and UTC timezone,
    # i.e. 2012-11-20T22:00:37Z
    # @return [DateTime]
    attr_accessor :timestamp

    # Timestamp indicating when this allocation was created
    # @return [DateTime]
    attr_accessor :created_at

    # The scheme used if the proration was an upgrade. This is only present when
    # the allocation was created mid-period.
    # @return [String]
    attr_accessor :proration_upgrade_scheme

    # The scheme used if the proration was a downgrade. This is only present
    # when the allocation was created mid-period.
    # @return [String]
    attr_accessor :proration_downgrade_scheme

    # The scheme used if the proration was a downgrade. This is only present
    # when the allocation was created mid-period.
    # @return [Integer]
    attr_accessor :price_point_id

    # The scheme used if the proration was a downgrade. This is only present
    # when the allocation was created mid-period.
    # @return [String]
    attr_accessor :price_point_name

    # The scheme used if the proration was a downgrade. This is only present
    # when the allocation was created mid-period.
    # @return [String]
    attr_accessor :price_point_handle

    # The numerical interval. i.e. an interval of ‘30’ coupled with an
    # interval_unit of day would mean this component price point would renew
    # every 30 days. This property is only available for sites with
    # Multifrequency enabled.
    # @return [Integer]
    attr_accessor :interval

    # A string representing the interval unit for this component price point,
    # either month or day. This property is only available for sites with
    # Multifrequency enabled.
    # @return [IntervalUnit]
    attr_accessor :interval_unit

    # A string representing the interval unit for this component price point,
    # either month or day. This property is only available for sites with
    # Multifrequency enabled.
    # @return [Integer]
    attr_accessor :previous_price_point_id

    # If the change in cost is an upgrade, this determines if the charge should
    # accrue to the next renewal or if capture should be attempted immediately.
    # @return [TrueClass | FalseClass]
    attr_accessor :accrue_charge

    # If true, if the immediate component payment fails, initiate dunning for
    # the subscription. 
    # Otherwise, leave the charges on the subscription to pay for at renewal.
    # @return [TrueClass | FalseClass]
    attr_accessor :initiate_dunning

    # The type of credit to be created when upgrading/downgrading. Defaults to
    # the component and then site setting if one is not provided.
    # Available values: `full`, `prorated`, `none`.
    # @return [CreditType]
    attr_accessor :upgrade_charge

    # The type of credit to be created when upgrading/downgrading. Defaults to
    # the component and then site setting if one is not provided.
    # Available values: `full`, `prorated`, `none`.
    # @return [CreditType]
    attr_accessor :downgrade_credit

    # The type of credit to be created when upgrading/downgrading. Defaults to
    # the component and then site setting if one is not provided.
    # Available values: `full`, `prorated`, `none`.
    # @return [PaymentForAllocation]
    attr_accessor :payment

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['allocation_id'] = 'allocation_id'
      @_hash['component_id'] = 'component_id'
      @_hash['component_handle'] = 'component_handle'
      @_hash['subscription_id'] = 'subscription_id'
      @_hash['quantity'] = 'quantity'
      @_hash['previous_quantity'] = 'previous_quantity'
      @_hash['memo'] = 'memo'
      @_hash['timestamp'] = 'timestamp'
      @_hash['created_at'] = 'created_at'
      @_hash['proration_upgrade_scheme'] = 'proration_upgrade_scheme'
      @_hash['proration_downgrade_scheme'] = 'proration_downgrade_scheme'
      @_hash['price_point_id'] = 'price_point_id'
      @_hash['price_point_name'] = 'price_point_name'
      @_hash['price_point_handle'] = 'price_point_handle'
      @_hash['interval'] = 'interval'
      @_hash['interval_unit'] = 'interval_unit'
      @_hash['previous_price_point_id'] = 'previous_price_point_id'
      @_hash['accrue_charge'] = 'accrue_charge'
      @_hash['initiate_dunning'] = 'initiate_dunning'
      @_hash['upgrade_charge'] = 'upgrade_charge'
      @_hash['downgrade_credit'] = 'downgrade_credit'
      @_hash['payment'] = 'payment'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        allocation_id
        component_id
        component_handle
        subscription_id
        quantity
        previous_quantity
        memo
        timestamp
        created_at
        proration_upgrade_scheme
        proration_downgrade_scheme
        price_point_id
        price_point_name
        price_point_handle
        interval
        interval_unit
        previous_price_point_id
        accrue_charge
        initiate_dunning
        upgrade_charge
        downgrade_credit
        payment
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        component_handle
        memo
        upgrade_charge
        downgrade_credit
        payment
      ]
    end

    def initialize(allocation_id = SKIP,
                   component_id = SKIP,
                   component_handle = SKIP,
                   subscription_id = SKIP,
                   quantity = SKIP,
                   previous_quantity = SKIP,
                   memo = SKIP,
                   timestamp = SKIP,
                   created_at = SKIP,
                   proration_upgrade_scheme = SKIP,
                   proration_downgrade_scheme = SKIP,
                   price_point_id = SKIP,
                   price_point_name = SKIP,
                   price_point_handle = SKIP,
                   interval = SKIP,
                   interval_unit = SKIP,
                   previous_price_point_id = SKIP,
                   accrue_charge = SKIP,
                   initiate_dunning = SKIP,
                   upgrade_charge = SKIP,
                   downgrade_credit = SKIP,
                   payment = SKIP)
      @allocation_id = allocation_id unless allocation_id == SKIP
      @component_id = component_id unless component_id == SKIP
      @component_handle = component_handle unless component_handle == SKIP
      @subscription_id = subscription_id unless subscription_id == SKIP
      @quantity = quantity unless quantity == SKIP
      @previous_quantity = previous_quantity unless previous_quantity == SKIP
      @memo = memo unless memo == SKIP
      @timestamp = timestamp unless timestamp == SKIP
      @created_at = created_at unless created_at == SKIP
      @proration_upgrade_scheme = proration_upgrade_scheme unless proration_upgrade_scheme == SKIP
      unless proration_downgrade_scheme == SKIP
        @proration_downgrade_scheme =
          proration_downgrade_scheme
      end
      @price_point_id = price_point_id unless price_point_id == SKIP
      @price_point_name = price_point_name unless price_point_name == SKIP
      @price_point_handle = price_point_handle unless price_point_handle == SKIP
      @interval = interval unless interval == SKIP
      @interval_unit = interval_unit unless interval_unit == SKIP
      @previous_price_point_id = previous_price_point_id unless previous_price_point_id == SKIP
      @accrue_charge = accrue_charge unless accrue_charge == SKIP
      @initiate_dunning = initiate_dunning unless initiate_dunning == SKIP
      @upgrade_charge = upgrade_charge unless upgrade_charge == SKIP
      @downgrade_credit = downgrade_credit unless downgrade_credit == SKIP
      @payment = payment unless payment == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      allocation_id = hash.key?('allocation_id') ? hash['allocation_id'] : SKIP
      component_id = hash.key?('component_id') ? hash['component_id'] : SKIP
      component_handle =
        hash.key?('component_handle') ? hash['component_handle'] : SKIP
      subscription_id =
        hash.key?('subscription_id') ? hash['subscription_id'] : SKIP
      quantity = hash.key?('quantity') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:AllocationQuantity), hash['quantity']
      ) : SKIP
      previous_quantity = hash.key?('previous_quantity') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:AllocationPreviousQuantity), hash['previous_quantity']
      ) : SKIP
      memo = hash.key?('memo') ? hash['memo'] : SKIP
      timestamp = if hash.key?('timestamp')
                    (DateTimeHelper.from_rfc3339(hash['timestamp']) if hash['timestamp'])
                  else
                    SKIP
                  end
      created_at = if hash.key?('created_at')
                     (DateTimeHelper.from_rfc3339(hash['created_at']) if hash['created_at'])
                   else
                     SKIP
                   end
      proration_upgrade_scheme =
        hash.key?('proration_upgrade_scheme') ? hash['proration_upgrade_scheme'] : SKIP
      proration_downgrade_scheme =
        hash.key?('proration_downgrade_scheme') ? hash['proration_downgrade_scheme'] : SKIP
      price_point_id =
        hash.key?('price_point_id') ? hash['price_point_id'] : SKIP
      price_point_name =
        hash.key?('price_point_name') ? hash['price_point_name'] : SKIP
      price_point_handle =
        hash.key?('price_point_handle') ? hash['price_point_handle'] : SKIP
      interval = hash.key?('interval') ? hash['interval'] : SKIP
      interval_unit = hash.key?('interval_unit') ? hash['interval_unit'] : SKIP
      previous_price_point_id =
        hash.key?('previous_price_point_id') ? hash['previous_price_point_id'] : SKIP
      accrue_charge = hash.key?('accrue_charge') ? hash['accrue_charge'] : SKIP
      initiate_dunning =
        hash.key?('initiate_dunning') ? hash['initiate_dunning'] : SKIP
      upgrade_charge =
        hash.key?('upgrade_charge') ? hash['upgrade_charge'] : SKIP
      downgrade_credit =
        hash.key?('downgrade_credit') ? hash['downgrade_credit'] : SKIP
      payment = hash.key?('payment') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:AllocationPayment), hash['payment']
      ) : SKIP

      # Create object from extracted values.
      Allocation.new(allocation_id,
                     component_id,
                     component_handle,
                     subscription_id,
                     quantity,
                     previous_quantity,
                     memo,
                     timestamp,
                     created_at,
                     proration_upgrade_scheme,
                     proration_downgrade_scheme,
                     price_point_id,
                     price_point_name,
                     price_point_handle,
                     interval,
                     interval_unit,
                     previous_price_point_id,
                     accrue_charge,
                     initiate_dunning,
                     upgrade_charge,
                     downgrade_credit,
                     payment)
    end

    def to_timestamp
      DateTimeHelper.to_rfc3339(timestamp)
    end

    def to_created_at
      DateTimeHelper.to_rfc3339(created_at)
    end

    # Validates an instance of the object from a given value.
    # @param [Allocation | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end
  end
end
