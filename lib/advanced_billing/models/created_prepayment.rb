# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # CreatedPrepayment Model.
  class CreatedPrepayment < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :subscription_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :amount_in_cents

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :memo

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :created_at

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :starting_balance_in_cents

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :ending_balance_in_cents

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['subscription_id'] = 'subscription_id'
      @_hash['amount_in_cents'] = 'amount_in_cents'
      @_hash['memo'] = 'memo'
      @_hash['created_at'] = 'created_at'
      @_hash['starting_balance_in_cents'] = 'starting_balance_in_cents'
      @_hash['ending_balance_in_cents'] = 'ending_balance_in_cents'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        subscription_id
        amount_in_cents
        memo
        created_at
        starting_balance_in_cents
        ending_balance_in_cents
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP,
                   subscription_id = SKIP,
                   amount_in_cents = SKIP,
                   memo = SKIP,
                   created_at = SKIP,
                   starting_balance_in_cents = SKIP,
                   ending_balance_in_cents = SKIP)
      @id = id unless id == SKIP
      @subscription_id = subscription_id unless subscription_id == SKIP
      @amount_in_cents = amount_in_cents unless amount_in_cents == SKIP
      @memo = memo unless memo == SKIP
      @created_at = created_at unless created_at == SKIP
      unless starting_balance_in_cents == SKIP
        @starting_balance_in_cents =
          starting_balance_in_cents
      end
      @ending_balance_in_cents = ending_balance_in_cents unless ending_balance_in_cents == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      subscription_id =
        hash.key?('subscription_id') ? hash['subscription_id'] : SKIP
      amount_in_cents =
        hash.key?('amount_in_cents') ? hash['amount_in_cents'] : SKIP
      memo = hash.key?('memo') ? hash['memo'] : SKIP
      created_at = hash.key?('created_at') ? hash['created_at'] : SKIP
      starting_balance_in_cents =
        hash.key?('starting_balance_in_cents') ? hash['starting_balance_in_cents'] : SKIP
      ending_balance_in_cents =
        hash.key?('ending_balance_in_cents') ? hash['ending_balance_in_cents'] : SKIP

      # Create object from extracted values.
      CreatedPrepayment.new(id,
                            subscription_id,
                            amount_in_cents,
                            memo,
                            created_at,
                            starting_balance_in_cents,
                            ending_balance_in_cents)
    end
  end
end
