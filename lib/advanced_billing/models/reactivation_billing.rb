# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # These values are only applicable to subscriptions using calendar billing
  class ReactivationBilling < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # You may choose how to handle the reactivation charge for that
    # subscription: 1) `prorated` A prorated charge for the product price will
    # be attempted for to complete the period 2) `immediate` A full-price charge
    # for the product price will be attempted immediately 3) `delayed` A
    # full-price charge for the product price will be attempted at the next
    # renewal
    # @return [ReactivationCharge]
    attr_accessor :reactivation_charge

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['reactivation_charge'] = 'reactivation_charge'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        reactivation_charge
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(reactivation_charge: ReactivationCharge::PRORATED,
                   additional_properties: {})
      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end

      @reactivation_charge = reactivation_charge unless reactivation_charge == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      reactivation_charge =
        hash['reactivation_charge'] ||= ReactivationCharge::PRORATED

      # Clean out expected properties from Hash.
      additional_properties = hash.reject { |k, _| names.value?(k) }

      # Create object from extracted values.
      ReactivationBilling.new(reactivation_charge: reactivation_charge,
                              additional_properties: additional_properties)
    end

    # Validates an instance of the object from a given value.
    # @param [ReactivationBilling | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} reactivation_charge: #{@reactivation_charge}, additional_properties:"\
      " #{get_additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} reactivation_charge: #{@reactivation_charge.inspect},"\
      " additional_properties: #{get_additional_properties}>"
    end
  end
end
