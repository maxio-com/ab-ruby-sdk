# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # ListSubscriptionComponentsForSiteFilter Model.
  class ListSubscriptionComponentsForSiteFilter < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Allows fetching components allocation with matching currency based on
    # provided values. Use in query `filter[currencies]=USD,EUR`.
    # @return [Array[String]]
    attr_accessor :currencies

    # Allows fetching components allocation with matching use_site_exchange_rate
    # based on provided value. Use in query
    # `filter[use_site_exchange_rate]=true`.
    # @return [TrueClass | FalseClass]
    attr_accessor :use_site_exchange_rate

    # Nested filter used for List Subscription Components For Site Filter
    # @return [SubscriptionFilter]
    attr_accessor :subscription

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['currencies'] = 'currencies'
      @_hash['use_site_exchange_rate'] = 'use_site_exchange_rate'
      @_hash['subscription'] = 'subscription'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        currencies
        use_site_exchange_rate
        subscription
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(currencies: SKIP, use_site_exchange_rate: SKIP,
                   subscription: SKIP, additional_properties: {})
      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end

      @currencies = currencies unless currencies == SKIP
      @use_site_exchange_rate = use_site_exchange_rate unless use_site_exchange_rate == SKIP
      @subscription = subscription unless subscription == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      currencies = hash.key?('currencies') ? hash['currencies'] : SKIP
      use_site_exchange_rate =
        hash.key?('use_site_exchange_rate') ? hash['use_site_exchange_rate'] : SKIP
      subscription = SubscriptionFilter.from_hash(hash['subscription']) if hash['subscription']

      # Clean out expected properties from Hash.
      additional_properties = hash.reject { |k, _| names.value?(k) }

      # Create object from extracted values.
      ListSubscriptionComponentsForSiteFilter.new(currencies: currencies,
                                                  use_site_exchange_rate: use_site_exchange_rate,
                                                  subscription: subscription,
                                                  additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} currencies: #{@currencies}, use_site_exchange_rate:"\
      " #{@use_site_exchange_rate}, subscription: #{@subscription}, additional_properties:"\
      " #{get_additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} currencies: #{@currencies.inspect}, use_site_exchange_rate:"\
      " #{@use_site_exchange_rate.inspect}, subscription: #{@subscription.inspect},"\
      " additional_properties: #{get_additional_properties}>"
    end
  end
end
