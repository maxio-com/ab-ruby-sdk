# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # ProductPricePointErrors Model.
  class ProductPricePointErrors < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :price_point

    # TODO: Write general description for this method
    # @return [Array[String]]
    attr_accessor :interval

    # TODO: Write general description for this method
    # @return [Array[String]]
    attr_accessor :interval_unit

    # TODO: Write general description for this method
    # @return [Array[String]]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [Array[String]]
    attr_accessor :price

    # TODO: Write general description for this method
    # @return [Array[String]]
    attr_accessor :price_in_cents

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['price_point'] = 'price_point'
      @_hash['interval'] = 'interval'
      @_hash['interval_unit'] = 'interval_unit'
      @_hash['name'] = 'name'
      @_hash['price'] = 'price'
      @_hash['price_in_cents'] = 'price_in_cents'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        price_point
        interval
        interval_unit
        name
        price
        price_in_cents
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(price_point: SKIP, interval: SKIP, interval_unit: SKIP,
                   name: SKIP, price: SKIP, price_in_cents: SKIP,
                   additional_properties: {})
      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end

      @price_point = price_point unless price_point == SKIP
      @interval = interval unless interval == SKIP
      @interval_unit = interval_unit unless interval_unit == SKIP
      @name = name unless name == SKIP
      @price = price unless price == SKIP
      @price_in_cents = price_in_cents unless price_in_cents == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      price_point = hash.key?('price_point') ? hash['price_point'] : SKIP
      interval = hash.key?('interval') ? hash['interval'] : SKIP
      interval_unit = hash.key?('interval_unit') ? hash['interval_unit'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      price = hash.key?('price') ? hash['price'] : SKIP
      price_in_cents =
        hash.key?('price_in_cents') ? hash['price_in_cents'] : SKIP

      # Clean out expected properties from Hash.
      additional_properties = hash.reject { |k, _| names.value?(k) }

      # Create object from extracted values.
      ProductPricePointErrors.new(price_point: price_point,
                                  interval: interval,
                                  interval_unit: interval_unit,
                                  name: name,
                                  price: price,
                                  price_in_cents: price_in_cents,
                                  additional_properties: additional_properties)
    end
  end
end
