# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # SubscriptionMigrationPreview Model.
  class SubscriptionMigrationPreview < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The amount of the prorated adjustment that would be issued for the current
    # subscription.
    # @return [Integer]
    attr_accessor :prorated_adjustment_in_cents

    # The amount of the charge that would be created for the new product.
    # @return [Integer]
    attr_accessor :charge_in_cents

    # The amount of the payment due in the case of an upgrade.
    # @return [Integer]
    attr_accessor :payment_due_in_cents

    # Represents a credit in cents that is applied to your subscription as part
    # of a migration process for a specific product, which reduces the amount
    # owed for the subscription.
    # @return [Integer]
    attr_accessor :credit_applied_in_cents

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['prorated_adjustment_in_cents'] = 'prorated_adjustment_in_cents'
      @_hash['charge_in_cents'] = 'charge_in_cents'
      @_hash['payment_due_in_cents'] = 'payment_due_in_cents'
      @_hash['credit_applied_in_cents'] = 'credit_applied_in_cents'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        prorated_adjustment_in_cents
        charge_in_cents
        payment_due_in_cents
        credit_applied_in_cents
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(prorated_adjustment_in_cents = SKIP,
                   charge_in_cents = SKIP,
                   payment_due_in_cents = SKIP,
                   credit_applied_in_cents = SKIP)
      unless prorated_adjustment_in_cents == SKIP
        @prorated_adjustment_in_cents =
          prorated_adjustment_in_cents
      end
      @charge_in_cents = charge_in_cents unless charge_in_cents == SKIP
      @payment_due_in_cents = payment_due_in_cents unless payment_due_in_cents == SKIP
      @credit_applied_in_cents = credit_applied_in_cents unless credit_applied_in_cents == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      prorated_adjustment_in_cents =
        hash.key?('prorated_adjustment_in_cents') ? hash['prorated_adjustment_in_cents'] : SKIP
      charge_in_cents =
        hash.key?('charge_in_cents') ? hash['charge_in_cents'] : SKIP
      payment_due_in_cents =
        hash.key?('payment_due_in_cents') ? hash['payment_due_in_cents'] : SKIP
      credit_applied_in_cents =
        hash.key?('credit_applied_in_cents') ? hash['credit_applied_in_cents'] : SKIP

      # Create object from extracted values.
      SubscriptionMigrationPreview.new(prorated_adjustment_in_cents,
                                       charge_in_cents,
                                       payment_due_in_cents,
                                       credit_applied_in_cents)
    end
  end
end
