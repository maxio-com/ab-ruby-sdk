# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # ActivateEventBasedComponent Model.
  class ActivateEventBasedComponent < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The Chargify id of the price point
    # @return [Integer]
    attr_accessor :price_point_id

    # This attribute is particularly useful when you need to align billing
    # events for different components on distinct schedules within a
    # subscription. Please note this only works for site with Multifrequency
    # enabled
    # @return [BillingSchedule]
    attr_accessor :billing_schedule

    # Create or update custom pricing unique to the subscription. Used in place
    # of `price_point_id`.
    # @return [ComponentCustomPrice]
    attr_accessor :custom_price

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['price_point_id'] = 'price_point_id'
      @_hash['billing_schedule'] = 'billing_schedule'
      @_hash['custom_price'] = 'custom_price'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        price_point_id
        billing_schedule
        custom_price
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(price_point_id: SKIP, billing_schedule: SKIP,
                   custom_price: SKIP, additional_properties: {})
      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end

      @price_point_id = price_point_id unless price_point_id == SKIP
      @billing_schedule = billing_schedule unless billing_schedule == SKIP
      @custom_price = custom_price unless custom_price == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      price_point_id =
        hash.key?('price_point_id') ? hash['price_point_id'] : SKIP
      billing_schedule = BillingSchedule.from_hash(hash['billing_schedule']) if
        hash['billing_schedule']
      custom_price = ComponentCustomPrice.from_hash(hash['custom_price']) if hash['custom_price']

      # Clean out expected properties from Hash.
      additional_properties = hash.reject { |k, _| names.value?(k) }

      # Create object from extracted values.
      ActivateEventBasedComponent.new(price_point_id: price_point_id,
                                      billing_schedule: billing_schedule,
                                      custom_price: custom_price,
                                      additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} price_point_id: #{@price_point_id}, billing_schedule: #{@billing_schedule},"\
      " custom_price: #{@custom_price}, additional_properties: #{get_additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} price_point_id: #{@price_point_id.inspect}, billing_schedule:"\
      " #{@billing_schedule.inspect}, custom_price: #{@custom_price.inspect},"\
      " additional_properties: #{get_additional_properties}>"
    end
  end
end
