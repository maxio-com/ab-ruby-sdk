# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # SubscriptionGroupSignupError Model.
  class SubscriptionGroupSignupError < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Object that as key have subscription position in request subscriptions
    # array and as value subscription errors object.
    # @return [Hash[String, SubscriptionGroupSubscriptionError]]
    attr_accessor :subscriptions

    # Object that as key have subscription position in request subscriptions
    # array and as value subscription errors object.
    # @return [String]
    attr_accessor :payer_reference

    # Object that as key have subscription position in request subscriptions
    # array and as value subscription errors object.
    # @return [PayerError]
    attr_accessor :payer

    # Object that as key have subscription position in request subscriptions
    # array and as value subscription errors object.
    # @return [Array[String]]
    attr_accessor :subscription_group

    # Object that as key have subscription position in request subscriptions
    # array and as value subscription errors object.
    # @return [String]
    attr_accessor :payment_profile_id

    # Object that as key have subscription position in request subscriptions
    # array and as value subscription errors object.
    # @return [String]
    attr_accessor :payer_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['subscriptions'] = 'subscriptions'
      @_hash['payer_reference'] = 'payer_reference'
      @_hash['payer'] = 'payer'
      @_hash['subscription_group'] = 'subscription_group'
      @_hash['payment_profile_id'] = 'payment_profile_id'
      @_hash['payer_id'] = 'payer_id'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        subscriptions
        payer_reference
        payer
        subscription_group
        payment_profile_id
        payer_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(subscriptions = SKIP,
                   payer_reference = SKIP,
                   payer = SKIP,
                   subscription_group = SKIP,
                   payment_profile_id = SKIP,
                   payer_id = SKIP)
      @subscriptions = subscriptions unless subscriptions == SKIP
      @payer_reference = payer_reference unless payer_reference == SKIP
      @payer = payer unless payer == SKIP
      @subscription_group = subscription_group unless subscription_group == SKIP
      @payment_profile_id = payment_profile_id unless payment_profile_id == SKIP
      @payer_id = payer_id unless payer_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      subscriptions = SubscriptionGroupSubscriptionError.from_hash(hash['subscriptions']) if
        hash['subscriptions']

      subscriptions = SKIP unless hash.key?('subscriptions')
      payer_reference =
        hash.key?('payer_reference') ? hash['payer_reference'] : SKIP
      payer = PayerError.from_hash(hash['payer']) if hash['payer']
      subscription_group =
        hash.key?('subscription_group') ? hash['subscription_group'] : SKIP
      payment_profile_id =
        hash.key?('payment_profile_id') ? hash['payment_profile_id'] : SKIP
      payer_id = hash.key?('payer_id') ? hash['payer_id'] : SKIP

      # Create object from extracted values.
      SubscriptionGroupSignupError.new(subscriptions,
                                       payer_reference,
                                       payer,
                                       subscription_group,
                                       payment_profile_id,
                                       payer_id)
    end
  end
end
