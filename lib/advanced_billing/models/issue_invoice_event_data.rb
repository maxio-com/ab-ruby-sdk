# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # Example schema for an `issue_invoice` event
  class IssueInvoiceEventData < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Consolidation level of the invoice, which is applicable to invoice
    # consolidation.  It will hold one of the following values:
    # * "none": A normal invoice with no consolidation.
    # * "child": An invoice segment which has been combined into a consolidated
    # invoice.
    # * "parent": A consolidated invoice, whose contents are composed of invoice
    # segments.
    # "Parent" invoices do not have lines of their own, but they have subtotals
    # and totals which aggregate the member invoice segments.
    # See also the [invoice consolidation
    # documentation](https://maxio.zendesk.com/hc/en-us/articles/24252269909389-
    # Invoice-Consolidation).
    # @return [InvoiceConsolidationLevel]
    attr_accessor :consolidation_level

    # The status of the invoice before event occurrence. See [Invoice
    # Statuses](https://maxio.zendesk.com/hc/en-us/articles/24252287829645-Advan
    # ced-Billing-Invoices-Overview#invoice-statuses) for more.
    # @return [InvoiceStatus]
    attr_accessor :from_status

    # The status of the invoice after event occurrence. See [Invoice
    # Statuses](https://maxio.zendesk.com/hc/en-us/articles/24252287829645-Advan
    # ced-Billing-Invoices-Overview#invoice-statuses) for more.
    # @return [InvoiceStatus]
    attr_accessor :to_status

    # Amount due on the invoice, which is `total_amount - credit_amount -
    # paid_amount`.
    # @return [String]
    attr_accessor :due_amount

    # The invoice total, which is `subtotal_amount - discount_amount +
    # tax_amount`.'
    # @return [String]
    attr_accessor :total_amount

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['consolidation_level'] = 'consolidation_level'
      @_hash['from_status'] = 'from_status'
      @_hash['to_status'] = 'to_status'
      @_hash['due_amount'] = 'due_amount'
      @_hash['total_amount'] = 'total_amount'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(consolidation_level:, from_status:, to_status:, due_amount:,
                   total_amount:, additional_properties: {})
      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end

      @consolidation_level = consolidation_level
      @from_status = from_status
      @to_status = to_status
      @due_amount = due_amount
      @total_amount = total_amount
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      consolidation_level =
        hash.key?('consolidation_level') ? hash['consolidation_level'] : nil
      from_status = hash.key?('from_status') ? hash['from_status'] : nil
      to_status = hash.key?('to_status') ? hash['to_status'] : nil
      due_amount = hash.key?('due_amount') ? hash['due_amount'] : nil
      total_amount = hash.key?('total_amount') ? hash['total_amount'] : nil

      # Clean out expected properties from Hash.
      additional_properties = hash.reject { |k, _| names.value?(k) }

      # Create object from extracted values.
      IssueInvoiceEventData.new(consolidation_level: consolidation_level,
                                from_status: from_status,
                                to_status: to_status,
                                due_amount: due_amount,
                                total_amount: total_amount,
                                additional_properties: additional_properties)
    end

    # Validates an instance of the object from a given value.
    # @param [IssueInvoiceEventData | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return (
          APIHelper.valid_type?(value.consolidation_level,
                                ->(val) { InvoiceConsolidationLevel.validate(val) }) and
            APIHelper.valid_type?(value.from_status,
                                  ->(val) { InvoiceStatus.validate(val) }) and
            APIHelper.valid_type?(value.to_status,
                                  ->(val) { InvoiceStatus.validate(val) }) and
            APIHelper.valid_type?(value.due_amount,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.total_amount,
                                  ->(val) { val.instance_of? String })
        )
      end

      return false unless value.instance_of? Hash

      (
        APIHelper.valid_type?(value['consolidation_level'],
                              ->(val) { InvoiceConsolidationLevel.validate(val) }) and
          APIHelper.valid_type?(value['from_status'],
                                ->(val) { InvoiceStatus.validate(val) }) and
          APIHelper.valid_type?(value['to_status'],
                                ->(val) { InvoiceStatus.validate(val) }) and
          APIHelper.valid_type?(value['due_amount'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['total_amount'],
                                ->(val) { val.instance_of? String })
      )
    end
  end
end
