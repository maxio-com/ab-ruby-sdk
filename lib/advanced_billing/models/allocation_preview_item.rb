# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # AllocationPreviewItem Model.
  class AllocationPreviewItem < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :component_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :subscription_id

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :quantity

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :previous_quantity

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :memo

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :timestamp

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :proration_upgrade_scheme

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :proration_downgrade_scheme

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :accrue_charge

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :upgrade_charge

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :downgrade_credit

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :price_point_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :previous_price_point_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :component_handle

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['component_id'] = 'component_id'
      @_hash['subscription_id'] = 'subscription_id'
      @_hash['quantity'] = 'quantity'
      @_hash['previous_quantity'] = 'previous_quantity'
      @_hash['memo'] = 'memo'
      @_hash['timestamp'] = 'timestamp'
      @_hash['proration_upgrade_scheme'] = 'proration_upgrade_scheme'
      @_hash['proration_downgrade_scheme'] = 'proration_downgrade_scheme'
      @_hash['accrue_charge'] = 'accrue_charge'
      @_hash['upgrade_charge'] = 'upgrade_charge'
      @_hash['downgrade_credit'] = 'downgrade_credit'
      @_hash['price_point_id'] = 'price_point_id'
      @_hash['previous_price_point_id'] = 'previous_price_point_id'
      @_hash['component_handle'] = 'component_handle'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        component_id
        subscription_id
        quantity
        previous_quantity
        memo
        timestamp
        proration_upgrade_scheme
        proration_downgrade_scheme
        accrue_charge
        upgrade_charge
        downgrade_credit
        price_point_id
        previous_price_point_id
        component_handle
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        timestamp
      ]
    end

    def initialize(component_id = SKIP,
                   subscription_id = SKIP,
                   quantity = SKIP,
                   previous_quantity = SKIP,
                   memo = SKIP,
                   timestamp = SKIP,
                   proration_upgrade_scheme = SKIP,
                   proration_downgrade_scheme = SKIP,
                   accrue_charge = SKIP,
                   upgrade_charge = SKIP,
                   downgrade_credit = SKIP,
                   price_point_id = SKIP,
                   previous_price_point_id = SKIP,
                   component_handle = SKIP)
      @component_id = component_id unless component_id == SKIP
      @subscription_id = subscription_id unless subscription_id == SKIP
      @quantity = quantity unless quantity == SKIP
      @previous_quantity = previous_quantity unless previous_quantity == SKIP
      @memo = memo unless memo == SKIP
      @timestamp = timestamp unless timestamp == SKIP
      @proration_upgrade_scheme = proration_upgrade_scheme unless proration_upgrade_scheme == SKIP
      unless proration_downgrade_scheme == SKIP
        @proration_downgrade_scheme =
          proration_downgrade_scheme
      end
      @accrue_charge = accrue_charge unless accrue_charge == SKIP
      @upgrade_charge = upgrade_charge unless upgrade_charge == SKIP
      @downgrade_credit = downgrade_credit unless downgrade_credit == SKIP
      @price_point_id = price_point_id unless price_point_id == SKIP
      @previous_price_point_id = previous_price_point_id unless previous_price_point_id == SKIP
      @component_handle = component_handle unless component_handle == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      component_id = hash.key?('component_id') ? hash['component_id'] : SKIP
      subscription_id =
        hash.key?('subscription_id') ? hash['subscription_id'] : SKIP
      quantity = hash.key?('quantity') ? hash['quantity'] : SKIP
      previous_quantity =
        hash.key?('previous_quantity') ? hash['previous_quantity'] : SKIP
      memo = hash.key?('memo') ? hash['memo'] : SKIP
      timestamp = hash.key?('timestamp') ? hash['timestamp'] : SKIP
      proration_upgrade_scheme =
        hash.key?('proration_upgrade_scheme') ? hash['proration_upgrade_scheme'] : SKIP
      proration_downgrade_scheme =
        hash.key?('proration_downgrade_scheme') ? hash['proration_downgrade_scheme'] : SKIP
      accrue_charge = hash.key?('accrue_charge') ? hash['accrue_charge'] : SKIP
      upgrade_charge =
        hash.key?('upgrade_charge') ? hash['upgrade_charge'] : SKIP
      downgrade_credit =
        hash.key?('downgrade_credit') ? hash['downgrade_credit'] : SKIP
      price_point_id =
        hash.key?('price_point_id') ? hash['price_point_id'] : SKIP
      previous_price_point_id =
        hash.key?('previous_price_point_id') ? hash['previous_price_point_id'] : SKIP
      component_handle =
        hash.key?('component_handle') ? hash['component_handle'] : SKIP

      # Create object from extracted values.
      AllocationPreviewItem.new(component_id,
                                subscription_id,
                                quantity,
                                previous_quantity,
                                memo,
                                timestamp,
                                proration_upgrade_scheme,
                                proration_downgrade_scheme,
                                accrue_charge,
                                upgrade_charge,
                                downgrade_credit,
                                price_point_id,
                                previous_price_point_id,
                                component_handle)
    end
  end
end
