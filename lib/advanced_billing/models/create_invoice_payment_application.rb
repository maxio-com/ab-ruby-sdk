# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # CreateInvoicePaymentApplication Model.
  class CreateInvoicePaymentApplication < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Unique identifier for the invoice. It has the prefix "inv_" followed by
    # alphanumeric characters.
    # @return [String]
    attr_accessor :invoice_uid

    # Dollar amount of the invoice payment (eg. "10.50" => $10.50).
    # @return [String]
    attr_accessor :amount

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['invoice_uid'] = 'invoice_uid'
      @_hash['amount'] = 'amount'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(invoice_uid = nil,
                   amount = nil,
                   additional_properties = {})
      @invoice_uid = invoice_uid
      @amount = amount

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      invoice_uid = hash.key?('invoice_uid') ? hash['invoice_uid'] : nil
      amount = hash.key?('amount') ? hash['amount'] : nil

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      CreateInvoicePaymentApplication.new(invoice_uid,
                                          amount,
                                          hash)
    end
  end
end
