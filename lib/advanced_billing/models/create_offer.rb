# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # CreateOffer Model.
  class CreateOffer < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :handle

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :product_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :product_price_point_id

    # TODO: Write general description for this method
    # @return [Array[CreateOfferComponent]]
    attr_accessor :components

    # TODO: Write general description for this method
    # @return [Array[String]]
    attr_accessor :coupons

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['handle'] = 'handle'
      @_hash['description'] = 'description'
      @_hash['product_id'] = 'product_id'
      @_hash['product_price_point_id'] = 'product_price_point_id'
      @_hash['components'] = 'components'
      @_hash['coupons'] = 'coupons'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        name
        handle
        description
        product_id
        product_price_point_id
        components
        coupons
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(name = SKIP,
                   handle = SKIP,
                   description = SKIP,
                   product_id = SKIP,
                   product_price_point_id = SKIP,
                   components = SKIP,
                   coupons = SKIP)
      @name = name unless name == SKIP
      @handle = handle unless handle == SKIP
      @description = description unless description == SKIP
      @product_id = product_id unless product_id == SKIP
      @product_price_point_id = product_price_point_id unless product_price_point_id == SKIP
      @components = components unless components == SKIP
      @coupons = coupons unless coupons == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : SKIP
      handle = hash.key?('handle') ? hash['handle'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP
      product_id = hash.key?('product_id') ? hash['product_id'] : SKIP
      product_price_point_id =
        hash.key?('product_price_point_id') ? hash['product_price_point_id'] : SKIP
      # Parameter is an array, so we need to iterate through it
      components = nil
      unless hash['components'].nil?
        components = []
        hash['components'].each do |structure|
          components << (CreateOfferComponent.from_hash(structure) if structure)
        end
      end

      components = SKIP unless hash.key?('components')
      coupons = hash.key?('coupons') ? hash['coupons'] : SKIP

      # Create object from extracted values.
      CreateOffer.new(name,
                      handle,
                      description,
                      product_id,
                      product_price_point_id,
                      components,
                      coupons)
    end
  end
end
