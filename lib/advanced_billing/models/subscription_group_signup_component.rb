# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # SubscriptionGroupSignupComponent Model.
  class SubscriptionGroupSignupComponent < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Required if passing any component to `components` attribute.
    # @return [Object]
    attr_accessor :component_id

    # Required if passing any component to `components` attribute.
    # @return [Object]
    attr_accessor :allocated_quantity

    # Required if passing any component to `components` attribute.
    # @return [Object]
    attr_accessor :unit_balance

    # Required if passing any component to `components` attribute.
    # @return [Object]
    attr_accessor :price_point_id

    # Used in place of `price_point_id` to define a custom price point unique to
    # the subscription. You still need to provide `component_id`.
    # @return [SubscriptionGroupComponentCustomPrice]
    attr_accessor :custom_price

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['component_id'] = 'component_id'
      @_hash['allocated_quantity'] = 'allocated_quantity'
      @_hash['unit_balance'] = 'unit_balance'
      @_hash['price_point_id'] = 'price_point_id'
      @_hash['custom_price'] = 'custom_price'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        component_id
        allocated_quantity
        unit_balance
        price_point_id
        custom_price
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(component_id = SKIP,
                   allocated_quantity = SKIP,
                   unit_balance = SKIP,
                   price_point_id = SKIP,
                   custom_price = SKIP)
      @component_id = component_id unless component_id == SKIP
      @allocated_quantity = allocated_quantity unless allocated_quantity == SKIP
      @unit_balance = unit_balance unless unit_balance == SKIP
      @price_point_id = price_point_id unless price_point_id == SKIP
      @custom_price = custom_price unless custom_price == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      component_id = hash.key?('component_id') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:SubscriptionGroupSignupComponentComponentId), hash['component_id']
      ) : SKIP
      allocated_quantity = hash.key?('allocated_quantity') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:SubscriptionGroupSignupComponentAllocatedQuantity), hash['allocated_quantity']
      ) : SKIP
      unit_balance = hash.key?('unit_balance') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:SubscriptionGroupSignupComponentUnitBalance), hash['unit_balance']
      ) : SKIP
      price_point_id = hash.key?('price_point_id') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:SubscriptionGroupSignupComponentPricePointId), hash['price_point_id']
      ) : SKIP
      custom_price = SubscriptionGroupComponentCustomPrice.from_hash(hash['custom_price']) if
        hash['custom_price']

      # Create object from extracted values.
      SubscriptionGroupSignupComponent.new(component_id,
                                           allocated_quantity,
                                           unit_balance,
                                           price_point_id,
                                           custom_price)
    end

    # Validates an instance of the object from a given value.
    # @param [SubscriptionGroupSignupComponent | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end
  end
end
