# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # PaymentMethodCreditCardType Model.
  class PaymentMethodCreditCardType < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :card_brand

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :card_expiration

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_four

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :masked_card_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['card_brand'] = 'card_brand'
      @_hash['card_expiration'] = 'card_expiration'
      @_hash['last_four'] = 'last_four'
      @_hash['masked_card_number'] = 'masked_card_number'
      @_hash['type'] = 'type'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        card_brand
        card_expiration
        last_four
        masked_card_number
        type
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        last_four
      ]
    end

    def initialize(card_brand = SKIP,
                   card_expiration = SKIP,
                   last_four = SKIP,
                   masked_card_number = SKIP,
                   type = 'credit_card')
      @card_brand = card_brand unless card_brand == SKIP
      @card_expiration = card_expiration unless card_expiration == SKIP
      @last_four = last_four unless last_four == SKIP
      @masked_card_number = masked_card_number unless masked_card_number == SKIP
      @type = type unless type == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      card_brand = hash.key?('card_brand') ? hash['card_brand'] : SKIP
      card_expiration =
        hash.key?('card_expiration') ? hash['card_expiration'] : SKIP
      last_four = hash.key?('last_four') ? hash['last_four'] : SKIP
      masked_card_number =
        hash.key?('masked_card_number') ? hash['masked_card_number'] : SKIP
      type = hash['type'] ||= 'credit_card'

      # Create object from extracted values.
      PaymentMethodCreditCardType.new(card_brand,
                                      card_expiration,
                                      last_four,
                                      masked_card_number,
                                      type)
    end

    # Validates an instance of the object from a given value.
    # @param [PaymentMethodCreditCardType | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end
  end
end
