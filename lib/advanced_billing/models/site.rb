# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # Site Model.
  class Site < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :subdomain

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :currency

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :seller_id

    # TODO: Write general description for this method
    # @return [Array[String]]
    attr_accessor :non_primary_currencies

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :relationship_invoicing_enabled

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :customer_hierarchy_enabled

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :whopays_enabled

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :whopays_default_payer

    # TODO: Write general description for this method
    # @return [AllocationSettings]
    attr_accessor :allocation_settings

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :default_payment_collection_method

    # TODO: Write general description for this method
    # @return [OrganizationAddress]
    attr_accessor :organization_address

    # TODO: Write general description for this method
    # @return [TaxConfiguration]
    attr_accessor :tax_configuration

    # TODO: Write general description for this method
    # @return [NetTerms]
    attr_accessor :net_terms

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :test

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['subdomain'] = 'subdomain'
      @_hash['currency'] = 'currency'
      @_hash['seller_id'] = 'seller_id'
      @_hash['non_primary_currencies'] = 'non_primary_currencies'
      @_hash['relationship_invoicing_enabled'] =
        'relationship_invoicing_enabled'
      @_hash['customer_hierarchy_enabled'] = 'customer_hierarchy_enabled'
      @_hash['whopays_enabled'] = 'whopays_enabled'
      @_hash['whopays_default_payer'] = 'whopays_default_payer'
      @_hash['allocation_settings'] = 'allocation_settings'
      @_hash['default_payment_collection_method'] =
        'default_payment_collection_method'
      @_hash['organization_address'] = 'organization_address'
      @_hash['tax_configuration'] = 'tax_configuration'
      @_hash['net_terms'] = 'net_terms'
      @_hash['test'] = 'test'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        name
        subdomain
        currency
        seller_id
        non_primary_currencies
        relationship_invoicing_enabled
        customer_hierarchy_enabled
        whopays_enabled
        whopays_default_payer
        allocation_settings
        default_payment_collection_method
        organization_address
        tax_configuration
        net_terms
        test
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP,
                   name = SKIP,
                   subdomain = SKIP,
                   currency = SKIP,
                   seller_id = SKIP,
                   non_primary_currencies = SKIP,
                   relationship_invoicing_enabled = SKIP,
                   customer_hierarchy_enabled = SKIP,
                   whopays_enabled = SKIP,
                   whopays_default_payer = SKIP,
                   allocation_settings = SKIP,
                   default_payment_collection_method = SKIP,
                   organization_address = SKIP,
                   tax_configuration = SKIP,
                   net_terms = SKIP,
                   test = SKIP)
      @id = id unless id == SKIP
      @name = name unless name == SKIP
      @subdomain = subdomain unless subdomain == SKIP
      @currency = currency unless currency == SKIP
      @seller_id = seller_id unless seller_id == SKIP
      @non_primary_currencies = non_primary_currencies unless non_primary_currencies == SKIP
      unless relationship_invoicing_enabled == SKIP
        @relationship_invoicing_enabled =
          relationship_invoicing_enabled
      end
      unless customer_hierarchy_enabled == SKIP
        @customer_hierarchy_enabled =
          customer_hierarchy_enabled
      end
      @whopays_enabled = whopays_enabled unless whopays_enabled == SKIP
      @whopays_default_payer = whopays_default_payer unless whopays_default_payer == SKIP
      @allocation_settings = allocation_settings unless allocation_settings == SKIP
      unless default_payment_collection_method == SKIP
        @default_payment_collection_method =
          default_payment_collection_method
      end
      @organization_address = organization_address unless organization_address == SKIP
      @tax_configuration = tax_configuration unless tax_configuration == SKIP
      @net_terms = net_terms unless net_terms == SKIP
      @test = test unless test == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      subdomain = hash.key?('subdomain') ? hash['subdomain'] : SKIP
      currency = hash.key?('currency') ? hash['currency'] : SKIP
      seller_id = hash.key?('seller_id') ? hash['seller_id'] : SKIP
      non_primary_currencies =
        hash.key?('non_primary_currencies') ? hash['non_primary_currencies'] : SKIP
      relationship_invoicing_enabled =
        hash.key?('relationship_invoicing_enabled') ? hash['relationship_invoicing_enabled'] : SKIP
      customer_hierarchy_enabled =
        hash.key?('customer_hierarchy_enabled') ? hash['customer_hierarchy_enabled'] : SKIP
      whopays_enabled =
        hash.key?('whopays_enabled') ? hash['whopays_enabled'] : SKIP
      whopays_default_payer =
        hash.key?('whopays_default_payer') ? hash['whopays_default_payer'] : SKIP
      allocation_settings = AllocationSettings.from_hash(hash['allocation_settings']) if
        hash['allocation_settings']
      default_payment_collection_method =
        hash.key?('default_payment_collection_method') ? hash['default_payment_collection_method'] : SKIP
      organization_address = OrganizationAddress.from_hash(hash['organization_address']) if
        hash['organization_address']
      tax_configuration = TaxConfiguration.from_hash(hash['tax_configuration']) if
        hash['tax_configuration']
      net_terms = NetTerms.from_hash(hash['net_terms']) if hash['net_terms']
      test = hash.key?('test') ? hash['test'] : SKIP

      # Create object from extracted values.
      Site.new(id,
               name,
               subdomain,
               currency,
               seller_id,
               non_primary_currencies,
               relationship_invoicing_enabled,
               customer_hierarchy_enabled,
               whopays_enabled,
               whopays_default_payer,
               allocation_settings,
               default_payment_collection_method,
               organization_address,
               tax_configuration,
               net_terms,
               test)
    end
  end
end
