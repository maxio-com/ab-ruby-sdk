# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # PaymentMethodCreditCard Model.
  class PaymentMethodCreditCard < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :card_brand

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :card_expiration

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_four

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :masked_card_number

    # TODO: Write general description for this method
    # @return [InvoiceEventPaymentMethod]
    attr_accessor :type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['card_brand'] = 'card_brand'
      @_hash['card_expiration'] = 'card_expiration'
      @_hash['last_four'] = 'last_four'
      @_hash['masked_card_number'] = 'masked_card_number'
      @_hash['type'] = 'type'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        card_expiration
        last_four
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        last_four
      ]
    end

    def initialize(card_brand = nil,
                   masked_card_number = nil,
                   type = nil,
                   card_expiration = SKIP,
                   last_four = SKIP)
      @card_brand = card_brand
      @card_expiration = card_expiration unless card_expiration == SKIP
      @last_four = last_four unless last_four == SKIP
      @masked_card_number = masked_card_number
      @type = type
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      card_brand = hash.key?('card_brand') ? hash['card_brand'] : nil
      masked_card_number =
        hash.key?('masked_card_number') ? hash['masked_card_number'] : nil
      type = hash.key?('type') ? hash['type'] : nil
      card_expiration =
        hash.key?('card_expiration') ? hash['card_expiration'] : SKIP
      last_four = hash.key?('last_four') ? hash['last_four'] : SKIP

      # Create object from extracted values.
      PaymentMethodCreditCard.new(card_brand,
                                  masked_card_number,
                                  type,
                                  card_expiration,
                                  last_four)
    end

    # Validates an instance of the object from a given value.
    # @param [PaymentMethodCreditCard | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return (
          APIHelper.valid_type?(value.card_brand,
                                ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.masked_card_number,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.type,
                                  ->(val) { InvoiceEventPaymentMethod.validate(val) })
        )
      end

      return false unless value.instance_of? Hash

      (
        APIHelper.valid_type?(value['card_brand'],
                              ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['masked_card_number'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['type'],
                                ->(val) { InvoiceEventPaymentMethod.validate(val) })
      )
    end
  end
end
