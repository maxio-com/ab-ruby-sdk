# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # CreateUsage Model.
  class CreateUsage < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # integer by default or decimal number if fractional quantities are enabled
    # for the component
    # @return [Float]
    attr_accessor :quantity

    # integer by default or decimal number if fractional quantities are enabled
    # for the component
    # @return [String]
    attr_accessor :price_point_id

    # integer by default or decimal number if fractional quantities are enabled
    # for the component
    # @return [String]
    attr_accessor :memo

    # This attribute is particularly useful when you need to align billing
    # events for different components on distinct schedules within a
    # subscription. Please note this only works for site with Multifrequency
    # enabled
    # @return [BillingSchedule]
    attr_accessor :billing_schedule

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['quantity'] = 'quantity'
      @_hash['price_point_id'] = 'price_point_id'
      @_hash['memo'] = 'memo'
      @_hash['billing_schedule'] = 'billing_schedule'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        quantity
        price_point_id
        memo
        billing_schedule
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(quantity: SKIP, price_point_id: SKIP, memo: SKIP,
                   billing_schedule: SKIP, additional_properties : {})
      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end

      @quantity = quantity unless quantity == SKIP
      @price_point_id = price_point_id unless price_point_id == SKIP
      @memo = memo unless memo == SKIP
      @billing_schedule = billing_schedule unless billing_schedule == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      quantity = hash.key?('quantity') ? hash['quantity'] : SKIP
      price_point_id =
        hash.key?('price_point_id') ? hash['price_point_id'] : SKIP
      memo = hash.key?('memo') ? hash['memo'] : SKIP
      billing_schedule = BillingSchedule.from_hash(hash['billing_schedule']) if
        hash['billing_schedule']

      # Clean out expected properties from Hash.
      additional_properties = hash.reject { |k, _| names.value?(k) }

      # Create object from extracted values.
      CreateUsage.new(quantity: quantity,
                      price_point_id: price_point_id,
                      memo: memo,
                      billing_schedule: billing_schedule,
                      additional_properties: additional_properties)
    end
  end
end
