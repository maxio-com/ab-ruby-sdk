# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # This attribute is particularly useful when you need to align billing events
  # for different components on distinct schedules within a subscription. Please
  # note this only works for site with Multifrequency enabled
  class BillingSchedule < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The initial_billing_at attribute in Maxio allows you to specify a custom
    # starting date for billing cycles associated with components that have
    # their own billing frequency set. Only ISO8601 format is supported.
    # @return [Date]
    attr_accessor :initial_billing_at

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['initial_billing_at'] = 'initial_billing_at'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        initial_billing_at
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(initial_billing_at = SKIP,
                   additional_properties = {})
      @initial_billing_at = initial_billing_at unless initial_billing_at == SKIP

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      initial_billing_at =
        hash.key?('initial_billing_at') ? hash['initial_billing_at'] : SKIP

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      BillingSchedule.new(initial_billing_at,
                          hash)
    end

    # Validates an instance of the object from a given value.
    # @param [BillingSchedule | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end
  end
end
