# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # ItemPricePointChanged Model.
  class ItemPricePointChanged < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :item_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :item_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :item_handle

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :item_name

    # TODO: Write general description for this method
    # @return [ItemPricePointData]
    attr_accessor :previous_price_point

    # TODO: Write general description for this method
    # @return [ItemPricePointData]
    attr_accessor :current_price_point

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['item_id'] = 'item_id'
      @_hash['item_type'] = 'item_type'
      @_hash['item_handle'] = 'item_handle'
      @_hash['item_name'] = 'item_name'
      @_hash['previous_price_point'] = 'previous_price_point'
      @_hash['current_price_point'] = 'current_price_point'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(item_id = nil,
                   item_type = nil,
                   item_handle = nil,
                   item_name = nil,
                   previous_price_point = nil,
                   current_price_point = nil)
      @item_id = item_id
      @item_type = item_type
      @item_handle = item_handle
      @item_name = item_name
      @previous_price_point = previous_price_point
      @current_price_point = current_price_point
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      item_id = hash.key?('item_id') ? hash['item_id'] : nil
      item_type = hash.key?('item_type') ? hash['item_type'] : nil
      item_handle = hash.key?('item_handle') ? hash['item_handle'] : nil
      item_name = hash.key?('item_name') ? hash['item_name'] : nil
      previous_price_point = ItemPricePointData.from_hash(hash['previous_price_point']) if
        hash['previous_price_point']
      current_price_point = ItemPricePointData.from_hash(hash['current_price_point']) if
        hash['current_price_point']

      # Create object from extracted values.
      ItemPricePointChanged.new(item_id,
                                item_type,
                                item_handle,
                                item_name,
                                previous_price_point,
                                current_price_point)
    end

    # Validates an instance of the object from a given value.
    # @param [ItemPricePointChanged | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return (
          APIHelper.valid_type?(value.item_id,
                                ->(val) { val.instance_of? Integer }) and
            APIHelper.valid_type?(value.item_type,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.item_handle,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.item_name,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.previous_price_point,
                                  ->(val) { ItemPricePointData.validate(val) }) and
            APIHelper.valid_type?(value.current_price_point,
                                  ->(val) { ItemPricePointData.validate(val) })
        )
      end

      return false unless value.instance_of? Hash

      (
        APIHelper.valid_type?(value['item_id'],
                              ->(val) { val.instance_of? Integer }) and
          APIHelper.valid_type?(value['item_type'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['item_handle'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['item_name'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['previous_price_point'],
                                ->(val) { ItemPricePointData.validate(val) }) and
          APIHelper.valid_type?(value['current_price_point'],
                                ->(val) { ItemPricePointData.validate(val) })
      )
    end
  end
end
