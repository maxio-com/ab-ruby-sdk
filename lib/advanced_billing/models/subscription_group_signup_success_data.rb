# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # SubscriptionGroupSignupSuccessData Model.
  class SubscriptionGroupSignupSuccessData < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :uid

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :scheme

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :customer_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :payment_profile_id

    # TODO: Write general description for this method
    # @return [Array[Integer]]
    attr_accessor :subscription_ids

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :primary_subscription_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :next_assessment_at

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :cancel_at_end_of_period

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['uid'] = 'uid'
      @_hash['scheme'] = 'scheme'
      @_hash['customer_id'] = 'customer_id'
      @_hash['payment_profile_id'] = 'payment_profile_id'
      @_hash['subscription_ids'] = 'subscription_ids'
      @_hash['primary_subscription_id'] = 'primary_subscription_id'
      @_hash['next_assessment_at'] = 'next_assessment_at'
      @_hash['state'] = 'state'
      @_hash['cancel_at_end_of_period'] = 'cancel_at_end_of_period'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(uid = nil,
                   scheme = nil,
                   customer_id = nil,
                   payment_profile_id = nil,
                   subscription_ids = nil,
                   primary_subscription_id = nil,
                   next_assessment_at = nil,
                   state = nil,
                   cancel_at_end_of_period = nil)
      @uid = uid
      @scheme = scheme
      @customer_id = customer_id
      @payment_profile_id = payment_profile_id
      @subscription_ids = subscription_ids
      @primary_subscription_id = primary_subscription_id
      @next_assessment_at = next_assessment_at
      @state = state
      @cancel_at_end_of_period = cancel_at_end_of_period
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      uid = hash.key?('uid') ? hash['uid'] : nil
      scheme = hash.key?('scheme') ? hash['scheme'] : nil
      customer_id = hash.key?('customer_id') ? hash['customer_id'] : nil
      payment_profile_id =
        hash.key?('payment_profile_id') ? hash['payment_profile_id'] : nil
      subscription_ids =
        hash.key?('subscription_ids') ? hash['subscription_ids'] : nil
      primary_subscription_id =
        hash.key?('primary_subscription_id') ? hash['primary_subscription_id'] : nil
      next_assessment_at =
        hash.key?('next_assessment_at') ? hash['next_assessment_at'] : nil
      state = hash.key?('state') ? hash['state'] : nil
      cancel_at_end_of_period =
        hash.key?('cancel_at_end_of_period') ? hash['cancel_at_end_of_period'] : nil

      # Create object from extracted values.
      SubscriptionGroupSignupSuccessData.new(uid,
                                             scheme,
                                             customer_id,
                                             payment_profile_id,
                                             subscription_ids,
                                             primary_subscription_id,
                                             next_assessment_at,
                                             state,
                                             cancel_at_end_of_period)
    end
  end
end
