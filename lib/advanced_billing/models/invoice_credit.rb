# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module AdvancedBilling
  # InvoiceCredit Model.
  class InvoiceCredit < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :uid

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :credit_note_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :credit_note_uid

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :transaction_time

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :memo

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :original_amount

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :applied_amount

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['uid'] = 'uid'
      @_hash['credit_note_number'] = 'credit_note_number'
      @_hash['credit_note_uid'] = 'credit_note_uid'
      @_hash['transaction_time'] = 'transaction_time'
      @_hash['memo'] = 'memo'
      @_hash['original_amount'] = 'original_amount'
      @_hash['applied_amount'] = 'applied_amount'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        uid
        credit_note_number
        credit_note_uid
        transaction_time
        memo
        original_amount
        applied_amount
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(uid = SKIP,
                   credit_note_number = SKIP,
                   credit_note_uid = SKIP,
                   transaction_time = SKIP,
                   memo = SKIP,
                   original_amount = SKIP,
                   applied_amount = SKIP,
                   additional_properties = {})
      @uid = uid unless uid == SKIP
      @credit_note_number = credit_note_number unless credit_note_number == SKIP
      @credit_note_uid = credit_note_uid unless credit_note_uid == SKIP
      @transaction_time = transaction_time unless transaction_time == SKIP
      @memo = memo unless memo == SKIP
      @original_amount = original_amount unless original_amount == SKIP
      @applied_amount = applied_amount unless applied_amount == SKIP

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      uid = hash.key?('uid') ? hash['uid'] : SKIP
      credit_note_number =
        hash.key?('credit_note_number') ? hash['credit_note_number'] : SKIP
      credit_note_uid =
        hash.key?('credit_note_uid') ? hash['credit_note_uid'] : SKIP
      transaction_time = if hash.key?('transaction_time')
                           (DateTimeHelper.from_rfc3339(hash['transaction_time']) if hash['transaction_time'])
                         else
                           SKIP
                         end
      memo = hash.key?('memo') ? hash['memo'] : SKIP
      original_amount =
        hash.key?('original_amount') ? hash['original_amount'] : SKIP
      applied_amount =
        hash.key?('applied_amount') ? hash['applied_amount'] : SKIP

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      InvoiceCredit.new(uid,
                        credit_note_number,
                        credit_note_uid,
                        transaction_time,
                        memo,
                        original_amount,
                        applied_amount,
                        hash)
    end

    def to_custom_transaction_time
      DateTimeHelper.to_rfc3339(transaction_time)
    end
  end
end
