# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # CreateInvoiceCoupon Model.
  class CreateInvoiceCoupon < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :code

    # TODO: Write general description for this method
    # @return [Object]
    attr_accessor :percentage

    # TODO: Write general description for this method
    # @return [Object]
    attr_accessor :amount

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [Object]
    attr_accessor :product_family_id

    # TODO: Write general description for this method
    # @return [CompoundingStrategy]
    attr_accessor :compounding_strategy

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['code'] = 'code'
      @_hash['percentage'] = 'percentage'
      @_hash['amount'] = 'amount'
      @_hash['description'] = 'description'
      @_hash['product_family_id'] = 'product_family_id'
      @_hash['compounding_strategy'] = 'compounding_strategy'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        code
        percentage
        amount
        description
        product_family_id
        compounding_strategy
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(code = SKIP,
                   percentage = SKIP,
                   amount = SKIP,
                   description = SKIP,
                   product_family_id = SKIP,
                   compounding_strategy = SKIP)
      @code = code unless code == SKIP
      @percentage = percentage unless percentage == SKIP
      @amount = amount unless amount == SKIP
      @description = description unless description == SKIP
      @product_family_id = product_family_id unless product_family_id == SKIP
      @compounding_strategy = compounding_strategy unless compounding_strategy == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      code = hash.key?('code') ? hash['code'] : SKIP
      percentage = hash.key?('percentage') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:CreateInvoiceCouponPercentage), hash['percentage']
      ) : SKIP
      amount = hash.key?('amount') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:CreateInvoiceCouponAmount), hash['amount']
      ) : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP
      product_family_id = hash.key?('product_family_id') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:CreateInvoiceCouponProductFamilyId), hash['product_family_id']
      ) : SKIP
      compounding_strategy = hash.key?('compounding_strategy') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:CreateInvoiceCouponCompoundingStrategy), hash['compounding_strategy']
      ) : SKIP

      # Create object from extracted values.
      CreateInvoiceCoupon.new(code,
                              percentage,
                              amount,
                              description,
                              product_family_id,
                              compounding_strategy)
    end

    # Validates an instance of the object from a given value.
    # @param [CreateInvoiceCoupon | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end
  end
end
