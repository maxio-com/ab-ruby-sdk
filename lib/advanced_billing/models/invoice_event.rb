# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module AdvancedBilling
  # InvoiceEvent Model.
  class InvoiceEvent < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :timestamp

    # TODO: Write general description for this method
    # @return [Invoice1]
    attr_accessor :invoice

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :event_type

    # Example schema for an `apply_credit_note` event
    # @return [ApplyCreditNoteEventData1]
    attr_accessor :event_data

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['timestamp'] = 'timestamp'
      @_hash['invoice'] = 'invoice'
      @_hash['event_type'] = 'event_type'
      @_hash['event_data'] = 'event_data'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        timestamp
        invoice
        event_type
        event_data
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP,
                   timestamp = SKIP,
                   invoice = SKIP,
                   event_type = 'Invoice Event',
                   event_data = SKIP,
                   additional_properties = {})
      @id = id unless id == SKIP
      @timestamp = timestamp unless timestamp == SKIP
      @invoice = invoice unless invoice == SKIP
      @event_type = event_type unless event_type == SKIP
      @event_data = event_data unless event_data == SKIP

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      timestamp = if hash.key?('timestamp')
                    (DateTimeHelper.from_rfc3339(hash['timestamp']) if hash['timestamp'])
                  else
                    SKIP
                  end
      invoice = Invoice1.from_hash(hash['invoice']) if hash['invoice']
      event_type = hash['event_type'] ||= 'Invoice Event'
      event_data = ApplyCreditNoteEventData1.from_hash(hash['event_data']) if hash['event_data']

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      InvoiceEvent.new(id,
                       timestamp,
                       invoice,
                       event_type,
                       event_data,
                       hash)
    end

    def to_custom_timestamp
      DateTimeHelper.to_rfc3339(timestamp)
    end
  end
end
