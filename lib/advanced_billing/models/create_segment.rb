# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # CreateSegment Model.
  class CreateSegment < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # A value that will occur in your events that you want to bill upon. The
    # type of the value depends on the property type in the related event based
    # billing metric.
    # @return [Object]
    attr_accessor :segment_property_1_value

    # A value that will occur in your events that you want to bill upon. The
    # type of the value depends on the property type in the related event based
    # billing metric.
    # @return [Object]
    attr_accessor :segment_property_2_value

    # A value that will occur in your events that you want to bill upon. The
    # type of the value depends on the property type in the related event based
    # billing metric.
    # @return [Object]
    attr_accessor :segment_property_3_value

    # A value that will occur in your events that you want to bill upon. The
    # type of the value depends on the property type in the related event based
    # billing metric.
    # @return [Object]
    attr_accessor :segment_property_4_value

    # The identifier for the pricing scheme. See [Product
    # Components](https://help.chargify.com/products/product-components.html)
    # for an overview of pricing schemes.
    # @return [PricingScheme]
    attr_accessor :pricing_scheme

    # The identifier for the pricing scheme. See [Product
    # Components](https://help.chargify.com/products/product-components.html)
    # for an overview of pricing schemes.
    # @return [Array[CreateOrUpdateSegmentPrice]]
    attr_accessor :prices

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['segment_property_1_value'] = 'segment_property_1_value'
      @_hash['segment_property_2_value'] = 'segment_property_2_value'
      @_hash['segment_property_3_value'] = 'segment_property_3_value'
      @_hash['segment_property_4_value'] = 'segment_property_4_value'
      @_hash['pricing_scheme'] = 'pricing_scheme'
      @_hash['prices'] = 'prices'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        segment_property_1_value
        segment_property_2_value
        segment_property_3_value
        segment_property_4_value
        prices
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(pricing_scheme:, segment_property_1_value: SKIP,
                   segment_property_2_value: SKIP,
                   segment_property_3_value: SKIP,
                   segment_property_4_value: SKIP, prices: SKIP,
                   additional_properties : {})
      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end

      @segment_property_1_value = segment_property_1_value unless segment_property_1_value == SKIP
      @segment_property_2_value = segment_property_2_value unless segment_property_2_value == SKIP
      @segment_property_3_value = segment_property_3_value unless segment_property_3_value == SKIP
      @segment_property_4_value = segment_property_4_value unless segment_property_4_value == SKIP
      @pricing_scheme = pricing_scheme
      @prices = prices unless prices == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      pricing_scheme =
        hash.key?('pricing_scheme') ? hash['pricing_scheme'] : nil
      segment_property_1_value = hash.key?('segment_property_1_value') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:CreateSegmentSegmentProperty1Value), hash['segment_property_1_value']
      ) : SKIP
      segment_property_2_value = hash.key?('segment_property_2_value') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:CreateSegmentSegmentProperty2Value), hash['segment_property_2_value']
      ) : SKIP
      segment_property_3_value = hash.key?('segment_property_3_value') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:CreateSegmentSegmentProperty3Value), hash['segment_property_3_value']
      ) : SKIP
      segment_property_4_value = hash.key?('segment_property_4_value') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:CreateSegmentSegmentProperty4Value), hash['segment_property_4_value']
      ) : SKIP
      # Parameter is an array, so we need to iterate through it
      prices = nil
      unless hash['prices'].nil?
        prices = []
        hash['prices'].each do |structure|
          prices << (CreateOrUpdateSegmentPrice.from_hash(structure) if structure)
        end
      end

      prices = SKIP unless hash.key?('prices')

      # Clean out expected properties from Hash.
      additional_properties = hash.reject { |k, _| names.value?(k) }

      # Create object from extracted values.
      CreateSegment.new(pricing_scheme: pricing_scheme,
                        segment_property_1_value: segment_property_1_value,
                        segment_property_2_value: segment_property_2_value,
                        segment_property_3_value: segment_property_3_value,
                        segment_property_4_value: segment_property_4_value,
                        prices: prices,
                        additional_properties: additional_properties)
    end

    # Validates an instance of the object from a given value.
    # @param [CreateSegment | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return APIHelper.valid_type?(value.pricing_scheme,
                                     ->(val) { PricingScheme.validate(val) })
      end

      return false unless value.instance_of? Hash

      APIHelper.valid_type?(value['pricing_scheme'],
                            ->(val) { PricingScheme.validate(val) })
    end
  end
end
