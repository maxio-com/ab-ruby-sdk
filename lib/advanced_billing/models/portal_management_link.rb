# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module AdvancedBilling
  # PortalManagementLink Model.
  class PortalManagementLink < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :url

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :fetch_count

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :created_at

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :new_link_available_at

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :expires_at

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :last_invite_sent_at

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['url'] = 'url'
      @_hash['fetch_count'] = 'fetch_count'
      @_hash['created_at'] = 'created_at'
      @_hash['new_link_available_at'] = 'new_link_available_at'
      @_hash['expires_at'] = 'expires_at'
      @_hash['last_invite_sent_at'] = 'last_invite_sent_at'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        url
        fetch_count
        created_at
        new_link_available_at
        expires_at
        last_invite_sent_at
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        last_invite_sent_at
      ]
    end

    def initialize(url: SKIP, fetch_count: SKIP, created_at: SKIP,
                   new_link_available_at: SKIP, expires_at: SKIP,
                   last_invite_sent_at: SKIP, additional_properties: {})
      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end

      @url = url unless url == SKIP
      @fetch_count = fetch_count unless fetch_count == SKIP
      @created_at = created_at unless created_at == SKIP
      @new_link_available_at = new_link_available_at unless new_link_available_at == SKIP
      @expires_at = expires_at unless expires_at == SKIP
      @last_invite_sent_at = last_invite_sent_at unless last_invite_sent_at == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      url = hash.key?('url') ? hash['url'] : SKIP
      fetch_count = hash.key?('fetch_count') ? hash['fetch_count'] : SKIP
      created_at = if hash.key?('created_at')
                     (DateTimeHelper.from_rfc3339(hash['created_at']) if hash['created_at'])
                   else
                     SKIP
                   end
      new_link_available_at = if hash.key?('new_link_available_at')
                                (DateTimeHelper.from_rfc3339(hash['new_link_available_at']) if hash['new_link_available_at'])
                              else
                                SKIP
                              end
      expires_at = if hash.key?('expires_at')
                     (DateTimeHelper.from_rfc3339(hash['expires_at']) if hash['expires_at'])
                   else
                     SKIP
                   end
      last_invite_sent_at = if hash.key?('last_invite_sent_at')
                              (DateTimeHelper.from_rfc3339(hash['last_invite_sent_at']) if hash['last_invite_sent_at'])
                            else
                              SKIP
                            end

      # Clean out expected properties from Hash.
      additional_properties = hash.reject { |k, _| names.value?(k) }

      # Create object from extracted values.
      PortalManagementLink.new(url: url,
                               fetch_count: fetch_count,
                               created_at: created_at,
                               new_link_available_at: new_link_available_at,
                               expires_at: expires_at,
                               last_invite_sent_at: last_invite_sent_at,
                               additional_properties: additional_properties)
    end

    def to_custom_created_at
      DateTimeHelper.to_rfc3339(created_at)
    end

    def to_custom_new_link_available_at
      DateTimeHelper.to_rfc3339(new_link_available_at)
    end

    def to_custom_expires_at
      DateTimeHelper.to_rfc3339(expires_at)
    end

    def to_custom_last_invite_sent_at
      DateTimeHelper.to_rfc3339(last_invite_sent_at)
    end
  end
end
