# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AdvancedBilling
  # Usage Model.
  class Usage < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :memo

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :created_at

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :price_point_id

    # TODO: Write general description for this method
    # @return [Object]
    attr_accessor :quantity

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :overage_quantity

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :component_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :component_handle

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :subscription_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['memo'] = 'memo'
      @_hash['created_at'] = 'created_at'
      @_hash['price_point_id'] = 'price_point_id'
      @_hash['quantity'] = 'quantity'
      @_hash['overage_quantity'] = 'overage_quantity'
      @_hash['component_id'] = 'component_id'
      @_hash['component_handle'] = 'component_handle'
      @_hash['subscription_id'] = 'subscription_id'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        memo
        created_at
        price_point_id
        quantity
        overage_quantity
        component_id
        component_handle
        subscription_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP,
                   memo = SKIP,
                   created_at = SKIP,
                   price_point_id = SKIP,
                   quantity = SKIP,
                   overage_quantity = SKIP,
                   component_id = SKIP,
                   component_handle = SKIP,
                   subscription_id = SKIP)
      @id = id unless id == SKIP
      @memo = memo unless memo == SKIP
      @created_at = created_at unless created_at == SKIP
      @price_point_id = price_point_id unless price_point_id == SKIP
      @quantity = quantity unless quantity == SKIP
      @overage_quantity = overage_quantity unless overage_quantity == SKIP
      @component_id = component_id unless component_id == SKIP
      @component_handle = component_handle unless component_handle == SKIP
      @subscription_id = subscription_id unless subscription_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      memo = hash.key?('memo') ? hash['memo'] : SKIP
      created_at = hash.key?('created_at') ? hash['created_at'] : SKIP
      price_point_id =
        hash.key?('price_point_id') ? hash['price_point_id'] : SKIP
      quantity = hash.key?('quantity') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:UsageQuantity), hash['quantity']
      ) : SKIP
      overage_quantity =
        hash.key?('overage_quantity') ? hash['overage_quantity'] : SKIP
      component_id = hash.key?('component_id') ? hash['component_id'] : SKIP
      component_handle =
        hash.key?('component_handle') ? hash['component_handle'] : SKIP
      subscription_id =
        hash.key?('subscription_id') ? hash['subscription_id'] : SKIP

      # Create object from extracted values.
      Usage.new(id,
                memo,
                created_at,
                price_point_id,
                quantity,
                overage_quantity,
                component_id,
                component_handle,
                subscription_id)
    end

    # Validates an instance of the object from a given value.
    # @param [Usage | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end
  end
end
