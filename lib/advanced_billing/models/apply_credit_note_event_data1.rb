# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module AdvancedBilling
  # Example schema for an `apply_credit_note` event
  class ApplyCreditNoteEventData1 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Unique identifier for the credit note application. It is generated
    # automatically by Chargify and has the prefix "cdt_" followed by
    # alphanumeric characters.
    # @return [String]
    attr_accessor :uid

    # A unique, identifying string that appears on the credit note and in places
    # it is referenced.
    # @return [String]
    attr_accessor :credit_note_number

    # Unique identifier for the credit note. It is generated automatically by
    # Chargify and has the prefix "cn_" followed by alphanumeric characters.
    # @return [String]
    attr_accessor :credit_note_uid

    # The full, original amount of the credit note.
    # @return [String]
    attr_accessor :original_amount

    # The amount of the credit note applied to invoice.
    # @return [String]
    attr_accessor :applied_amount

    # The time the credit note was applied, in ISO 8601 format, i.e.
    # "2019-06-07T17:20:06Z"
    # @return [DateTime]
    attr_accessor :transaction_time

    # The credit note memo.
    # @return [String]
    attr_accessor :memo

    # The role of the credit note (e.g. 'general')
    # @return [InvoiceRole2]
    attr_accessor :role

    # Shows whether it was applied to consolidated invoice or not
    # @return [TrueClass | FalseClass]
    attr_accessor :consolidated_invoice

    # List of credit notes applied to children invoices (if consolidated
    # invoice)
    # @return [Array[AppliedCreditNoteData]]
    attr_accessor :applied_credit_notes

    # A unique, identifying string that appears on the debit note and in places
    # it is referenced.
    # @return [String]
    attr_accessor :debit_note_number

    # Unique identifier for the debit note. It is generated automatically by
    # Chargify and has the prefix "db_" followed by alphanumeric characters.
    # @return [String]
    attr_accessor :debit_note_uid

    # Consolidation level of the invoice, which is applicable to invoice
    # consolidation.  It will hold one of the following values:
    # * "none": A normal invoice with no consolidation.
    # * "child": An invoice segment which has been combined into a consolidated
    # invoice.
    # * "parent": A consolidated invoice, whose contents are composed of invoice
    # segments.
    # "Parent" invoices do not have lines of their own, but they have subtotals
    # and totals which aggregate the member invoice segments.
    # See also the [invoice consolidation
    # documentation](https://chargify.zendesk.com/hc/en-us/articles/440774639183
    # 5).
    # @return [InvoiceConsolidationLevel]
    attr_accessor :consolidation_level

    # A nested data structure detailing the method of payment
    # @return [InvoiceEventPayment1]
    attr_accessor :payment_method

    # The Chargify id of the original payment
    # @return [Integer]
    attr_accessor :transaction_id

    # For invoices with `consolidation_level` of `child`, this specifies the
    # number of the parent (consolidated) invoice.
    # @return [Integer]
    attr_accessor :parent_invoice_number

    # For invoices with `consolidation_level` of `child`, this specifies the
    # number of the parent (consolidated) invoice.
    # @return [String]
    attr_accessor :remaining_prepayment_amount

    # The flag that shows whether the original payment was a prepayment or not
    # @return [TrueClass | FalseClass]
    attr_accessor :prepayment

    # The flag that shows whether the original payment was a prepayment or not
    # @return [TrueClass | FalseClass]
    attr_accessor :external

    # The flag that shows whether the original payment was a prepayment or not
    # @return [Integer]
    attr_accessor :id

    # ID of the site to which the invoice belongs.
    # @return [Integer]
    attr_accessor :site_id

    # ID of the customer to which the invoice belongs.
    # @return [Integer]
    attr_accessor :customer_id

    # ID of the subscription that generated the invoice.
    # @return [Integer]
    attr_accessor :subscription_id

    # A unique, identifying string that appears on the invoice and in places the
    # invoice is referenced.
    # While the UID is long and not appropriate to show to customers, the number
    # is usually shorter and consumable by the customer and the merchant alike.
    # @return [String]
    attr_accessor :number

    # A monotonically increasing number assigned to invoices as they are
    # created.  This number is unique within a site and can be used to sort and
    # order invoices.
    # @return [Integer]
    attr_accessor :sequence_number

    # A monotonically increasing number assigned to invoices as they are
    # created.  This number is unique within a site and can be used to sort and
    # order invoices.
    # @return [DateTime]
    attr_accessor :created_at

    # A monotonically increasing number assigned to invoices as they are
    # created.  This number is unique within a site and can be used to sort and
    # order invoices.
    # @return [DateTime]
    attr_accessor :updated_at

    # Date the invoice was issued to the customer.  This is the date that the
    # invoice was made available for payment.
    # The format is `"YYYY-MM-DD"`.
    # @return [Date]
    attr_accessor :issue_date

    # Date the invoice is due.
    # The format is `"YYYY-MM-DD"`.
    # @return [Date]
    attr_accessor :due_date

    # Date the invoice became fully paid.
    # If partial payments are applied to the invoice, this date will not be
    # present until payment has been made in full.
    # The format is `"YYYY-MM-DD"`.
    # @return [Date]
    attr_accessor :paid_date

    # The current status of the invoice. See [Invoice
    # Statuses](https://maxio-chargify.zendesk.com/hc/en-us/articles/54050787942
    # 53-Introduction-to-Invoices#invoice-statuses) for more.
    # @return [InvoiceStatus]
    attr_accessor :status

    # The current status of the invoice. See [Invoice
    # Statuses](https://maxio-chargify.zendesk.com/hc/en-us/articles/54050787942
    # 53-Introduction-to-Invoices#invoice-statuses) for more.
    # @return [Integer]
    attr_accessor :parent_invoice_id

    # The type of payment collection to be used in the subscription. For legacy
    # Statements Architecture valid options are - `invoice`, `automatic`. For
    # current Relationship Invoicing Architecture valid options are -
    # `remittance`, `automatic`, `prepaid`.
    # @return [CollectionMethod]
    attr_accessor :collection_method

    # A message that is printed on the invoice when it is marked for remittance
    # collection. It is intended to describe to the customer how they may make
    # payment, and is configured by the merchant.
    # @return [String]
    attr_accessor :payment_instructions

    # The ISO 4217 currency code (3 character string) representing the currency
    # of invoice transaction.
    # @return [String]
    attr_accessor :currency

    # For invoices with `consolidation_level` of `child`, this specifies the UID
    # of the parent (consolidated) invoice.
    # @return [String]
    attr_accessor :parent_invoice_uid

    # For invoices with `consolidation_level` of `child`, this specifies the UID
    # of the parent (consolidated) invoice.
    # @return [Integer]
    attr_accessor :subscription_group_id

    # For invoices with `consolidation_level` of `parent`, this specifies the ID
    # of the subscription which was the primary subscription of the subscription
    # group that generated the invoice.
    # @return [Integer]
    attr_accessor :group_primary_subscription_id

    # The name of the product subscribed when the invoice was generated.
    # @return [String]
    attr_accessor :product_name

    # The name of the product family subscribed when the invoice was generated.
    # @return [String]
    attr_accessor :product_family_name

    # Information about the seller (merchant) listed on the masthead of the
    # invoice.
    # @return [InvoiceSeller]
    attr_accessor :seller

    # Information about the customer who is owner or recipient the invoiced
    # subscription.
    # @return [InvoiceCustomer]
    attr_accessor :customer

    # Information about the customer who is owner or recipient the invoiced
    # subscription.
    # @return [InvoicePayer]
    attr_accessor :payer

    # Information about the customer who is owner or recipient the invoiced
    # subscription.
    # @return [Array[String]]
    attr_accessor :recipient_emails

    # Information about the customer who is owner or recipient the invoiced
    # subscription.
    # @return [Integer]
    attr_accessor :net_terms

    # Information about the customer who is owner or recipient the invoiced
    # subscription.
    # @return [BillingAddress]
    attr_accessor :billing_address

    # Information about the customer who is owner or recipient the invoiced
    # subscription.
    # @return [ShippingAddress]
    attr_accessor :shipping_address

    # Subtotal of the invoice, which is the sum of all line items before
    # discounts or taxes.
    # @return [String]
    attr_accessor :subtotal_amount

    # Total discount applied to the invoice.
    # @return [String]
    attr_accessor :discount_amount

    # Total tax on the invoice.
    # @return [String]
    attr_accessor :tax_amount

    # The invoice total, which is `subtotal_amount - discount_amount +
    # tax_amount`.'
    # @return [String]
    attr_accessor :total_amount

    # The amount of credit (from credit notes) applied to this invoice.
    # Credits offset the amount due from the customer.
    # @return [String]
    attr_accessor :credit_amount

    # The amount of the refund.
    # @return [String]
    attr_accessor :refund_amount

    # The amount paid on the invoice by the customer.
    # @return [String]
    attr_accessor :paid_amount

    # Amount due on the invoice, which is `total_amount - credit_amount -
    # paid_amount`.
    # @return [String]
    attr_accessor :due_amount

    # Line items on the invoice.
    # @return [Array[InvoiceLineItem2]]
    attr_accessor :line_items

    # Line items on the invoice.
    # @return [Array[InvoiceDiscount]]
    attr_accessor :discounts

    # Line items on the invoice.
    # @return [Array[InvoiceTax]]
    attr_accessor :taxes

    # Line items on the invoice.
    # @return [Array[InvoiceCredit]]
    attr_accessor :credits

    # Line items on the invoice.
    # @return [Array[InvoiceRefund]]
    attr_accessor :refunds

    # Line items on the invoice.
    # @return [Array[InvoicePayment]]
    attr_accessor :payments

    # Line items on the invoice.
    # @return [Array[InvoiceCustomField]]
    attr_accessor :custom_fields

    # Line items on the invoice.
    # @return [InvoiceDisplaySettings]
    attr_accessor :display_settings

    # The public URL of the invoice
    # @return [String]
    attr_accessor :public_url

    # The public URL of the invoice
    # @return [InvoicePreviousBalance]
    attr_accessor :previous_balance_data

    # The public URL of the invoice
    # @return [ChargebackStatus]
    attr_accessor :chargeback_status

    # The previous collection method of the invoice.
    # @return [String]
    attr_accessor :from_collection_method

    # The new collection method of the invoice.
    # @return [String]
    attr_accessor :to_collection_method

    # Identifier for the transaction within the payment gateway.
    # @return [String]
    attr_accessor :gateway_trans_id

    # The monetary value associated with the linked payment, expressed in
    # dollars.
    # @return [String]
    attr_accessor :amount

    # The monetary value associated with the linked payment, expressed in
    # dollars.
    # @return [Object]
    attr_accessor :from_status

    # The monetary value associated with the linked payment, expressed in
    # dollars.
    # @return [Object]
    attr_accessor :to_status

    # Credit notes are applied to invoices to offset invoiced amounts - they
    # reduce the amount due. This field is the date the credit note became fully
    # applied to invoices.
    # If the credit note has been partially applied, this field will not have a
    # value until it has been fully applied.
    # The format is `"YYYY-MM-DD"`.
    # @return [Date]
    attr_accessor :applied_date

    # The amount of the credit note remaining to be applied to invoices, which
    # is `total_amount - applied_amount`.
    # @return [String]
    attr_accessor :remaining_amount

    # The amount of the credit note remaining to be applied to invoices, which
    # is `total_amount - applied_amount`.
    # @return [Array[CreditNoteApplication]]
    attr_accessor :applications

    # An array of origin invoices for the credit note. Learn more about [Origin
    # Invoice from our
    # docs](https://chargify.zendesk.com/hc/en-us/articles/4407753036699#origin-
    # invoices)
    # @return [Array[OriginInvoice]]
    attr_accessor :origin_invoices

    # Unique identifier for the connected credit note. It is generated
    # automatically by Chargify and has the prefix "cn_" followed by
    # alphanumeric characters.
    # While the UID is long and not appropriate to show to customers, the number
    # is usually shorter and consumable by the customer and the merchant alike.
    # @return [String]
    attr_accessor :origin_credit_note_uid

    # A unique, identifying string of the connected credit note.
    # @return [String]
    attr_accessor :origin_credit_note_number

    # The monetary value of the payment, expressed in cents.
    # @return [Integer]
    attr_accessor :amount_in_cents

    # If true, credit was created and applied it to the invoice.
    # @return [TrueClass | FalseClass]
    attr_accessor :apply_credit

    # If true, credit was created and applied it to the invoice.
    # @return [CreditNote1]
    attr_accessor :credit_note_attributes

    # The ID of the payment transaction to be refunded.
    # @return [Integer]
    attr_accessor :payment_id

    # The ID of the refund transaction.
    # @return [Integer]
    attr_accessor :refund_id

    # If true, the invoice is an advance invoice.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_advance_invoice

    # The reason for the void.
    # @return [String]
    attr_accessor :reason

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['uid'] = 'uid'
      @_hash['credit_note_number'] = 'credit_note_number'
      @_hash['credit_note_uid'] = 'credit_note_uid'
      @_hash['original_amount'] = 'original_amount'
      @_hash['applied_amount'] = 'applied_amount'
      @_hash['transaction_time'] = 'transaction_time'
      @_hash['memo'] = 'memo'
      @_hash['role'] = 'role'
      @_hash['consolidated_invoice'] = 'consolidated_invoice'
      @_hash['applied_credit_notes'] = 'applied_credit_notes'
      @_hash['debit_note_number'] = 'debit_note_number'
      @_hash['debit_note_uid'] = 'debit_note_uid'
      @_hash['consolidation_level'] = 'consolidation_level'
      @_hash['payment_method'] = 'payment_method'
      @_hash['transaction_id'] = 'transaction_id'
      @_hash['parent_invoice_number'] = 'parent_invoice_number'
      @_hash['remaining_prepayment_amount'] = 'remaining_prepayment_amount'
      @_hash['prepayment'] = 'prepayment'
      @_hash['external'] = 'external'
      @_hash['id'] = 'id'
      @_hash['site_id'] = 'site_id'
      @_hash['customer_id'] = 'customer_id'
      @_hash['subscription_id'] = 'subscription_id'
      @_hash['number'] = 'number'
      @_hash['sequence_number'] = 'sequence_number'
      @_hash['created_at'] = 'created_at'
      @_hash['updated_at'] = 'updated_at'
      @_hash['issue_date'] = 'issue_date'
      @_hash['due_date'] = 'due_date'
      @_hash['paid_date'] = 'paid_date'
      @_hash['status'] = 'status'
      @_hash['parent_invoice_id'] = 'parent_invoice_id'
      @_hash['collection_method'] = 'collection_method'
      @_hash['payment_instructions'] = 'payment_instructions'
      @_hash['currency'] = 'currency'
      @_hash['parent_invoice_uid'] = 'parent_invoice_uid'
      @_hash['subscription_group_id'] = 'subscription_group_id'
      @_hash['group_primary_subscription_id'] =
        'group_primary_subscription_id'
      @_hash['product_name'] = 'product_name'
      @_hash['product_family_name'] = 'product_family_name'
      @_hash['seller'] = 'seller'
      @_hash['customer'] = 'customer'
      @_hash['payer'] = 'payer'
      @_hash['recipient_emails'] = 'recipient_emails'
      @_hash['net_terms'] = 'net_terms'
      @_hash['billing_address'] = 'billing_address'
      @_hash['shipping_address'] = 'shipping_address'
      @_hash['subtotal_amount'] = 'subtotal_amount'
      @_hash['discount_amount'] = 'discount_amount'
      @_hash['tax_amount'] = 'tax_amount'
      @_hash['total_amount'] = 'total_amount'
      @_hash['credit_amount'] = 'credit_amount'
      @_hash['refund_amount'] = 'refund_amount'
      @_hash['paid_amount'] = 'paid_amount'
      @_hash['due_amount'] = 'due_amount'
      @_hash['line_items'] = 'line_items'
      @_hash['discounts'] = 'discounts'
      @_hash['taxes'] = 'taxes'
      @_hash['credits'] = 'credits'
      @_hash['refunds'] = 'refunds'
      @_hash['payments'] = 'payments'
      @_hash['custom_fields'] = 'custom_fields'
      @_hash['display_settings'] = 'display_settings'
      @_hash['public_url'] = 'public_url'
      @_hash['previous_balance_data'] = 'previous_balance_data'
      @_hash['chargeback_status'] = 'chargeback_status'
      @_hash['from_collection_method'] = 'from_collection_method'
      @_hash['to_collection_method'] = 'to_collection_method'
      @_hash['gateway_trans_id'] = 'gateway_trans_id'
      @_hash['amount'] = 'amount'
      @_hash['from_status'] = 'from_status'
      @_hash['to_status'] = 'to_status'
      @_hash['applied_date'] = 'applied_date'
      @_hash['remaining_amount'] = 'remaining_amount'
      @_hash['applications'] = 'applications'
      @_hash['origin_invoices'] = 'origin_invoices'
      @_hash['origin_credit_note_uid'] = 'origin_credit_note_uid'
      @_hash['origin_credit_note_number'] = 'origin_credit_note_number'
      @_hash['amount_in_cents'] = 'amount_in_cents'
      @_hash['apply_credit'] = 'apply_credit'
      @_hash['credit_note_attributes'] = 'credit_note_attributes'
      @_hash['payment_id'] = 'payment_id'
      @_hash['refund_id'] = 'refund_id'
      @_hash['is_advance_invoice'] = 'is_advance_invoice'
      @_hash['reason'] = 'reason'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        role
        consolidated_invoice
        applied_credit_notes
        parent_invoice_number
        remaining_prepayment_amount
        external
        id
        site_id
        customer_id
        subscription_id
        number
        sequence_number
        created_at
        updated_at
        issue_date
        due_date
        paid_date
        status
        parent_invoice_id
        collection_method
        payment_instructions
        currency
        parent_invoice_uid
        subscription_group_id
        group_primary_subscription_id
        product_name
        product_family_name
        seller
        customer
        payer
        recipient_emails
        net_terms
        billing_address
        shipping_address
        subtotal_amount
        discount_amount
        tax_amount
        credit_amount
        paid_amount
        line_items
        discounts
        taxes
        credits
        refunds
        payments
        custom_fields
        display_settings
        public_url
        previous_balance_data
        gateway_trans_id
        amount
        applied_date
        remaining_amount
        applications
        origin_invoices
        origin_credit_note_uid
        origin_credit_note_number
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        memo
        parent_invoice_number
        remaining_prepayment_amount
        paid_date
        parent_invoice_id
        parent_invoice_uid
        subscription_group_id
        group_primary_subscription_id
      ]
    end

    def initialize(uid = nil,
                   credit_note_number = nil,
                   credit_note_uid = nil,
                   original_amount = nil,
                   applied_amount = nil,
                   transaction_time = nil,
                   memo = nil,
                   debit_note_number = nil,
                   debit_note_uid = nil,
                   consolidation_level = nil,
                   payment_method = nil,
                   transaction_id = nil,
                   prepayment = nil,
                   total_amount = nil,
                   refund_amount = nil,
                   due_amount = nil,
                   chargeback_status = nil,
                   from_collection_method = nil,
                   to_collection_method = nil,
                   from_status = nil,
                   to_status = nil,
                   amount_in_cents = nil,
                   apply_credit = nil,
                   credit_note_attributes = nil,
                   payment_id = nil,
                   refund_id = nil,
                   is_advance_invoice = nil,
                   reason = nil,
                   role = SKIP,
                   consolidated_invoice = SKIP,
                   applied_credit_notes = SKIP,
                   parent_invoice_number = SKIP,
                   remaining_prepayment_amount = SKIP,
                   external = SKIP,
                   id = SKIP,
                   site_id = SKIP,
                   customer_id = SKIP,
                   subscription_id = SKIP,
                   number = SKIP,
                   sequence_number = SKIP,
                   created_at = SKIP,
                   updated_at = SKIP,
                   issue_date = SKIP,
                   due_date = SKIP,
                   paid_date = SKIP,
                   status = SKIP,
                   parent_invoice_id = SKIP,
                   collection_method = SKIP,
                   payment_instructions = SKIP,
                   currency = SKIP,
                   parent_invoice_uid = SKIP,
                   subscription_group_id = SKIP,
                   group_primary_subscription_id = SKIP,
                   product_name = SKIP,
                   product_family_name = SKIP,
                   seller = SKIP,
                   customer = SKIP,
                   payer = SKIP,
                   recipient_emails = SKIP,
                   net_terms = SKIP,
                   billing_address = SKIP,
                   shipping_address = SKIP,
                   subtotal_amount = SKIP,
                   discount_amount = SKIP,
                   tax_amount = SKIP,
                   credit_amount = SKIP,
                   paid_amount = SKIP,
                   line_items = SKIP,
                   discounts = SKIP,
                   taxes = SKIP,
                   credits = SKIP,
                   refunds = SKIP,
                   payments = SKIP,
                   custom_fields = SKIP,
                   display_settings = SKIP,
                   public_url = SKIP,
                   previous_balance_data = SKIP,
                   gateway_trans_id = SKIP,
                   amount = SKIP,
                   applied_date = SKIP,
                   remaining_amount = SKIP,
                   applications = SKIP,
                   origin_invoices = SKIP,
                   origin_credit_note_uid = SKIP,
                   origin_credit_note_number = SKIP,
                   additional_properties = {})
      @uid = uid
      @credit_note_number = credit_note_number
      @credit_note_uid = credit_note_uid
      @original_amount = original_amount
      @applied_amount = applied_amount
      @transaction_time = transaction_time
      @memo = memo
      @role = role unless role == SKIP
      @consolidated_invoice = consolidated_invoice unless consolidated_invoice == SKIP
      @applied_credit_notes = applied_credit_notes unless applied_credit_notes == SKIP
      @debit_note_number = debit_note_number
      @debit_note_uid = debit_note_uid
      @consolidation_level = consolidation_level
      @payment_method = payment_method
      @transaction_id = transaction_id
      @parent_invoice_number = parent_invoice_number unless parent_invoice_number == SKIP
      unless remaining_prepayment_amount == SKIP
        @remaining_prepayment_amount =
          remaining_prepayment_amount
      end
      @prepayment = prepayment
      @external = external unless external == SKIP
      @id = id unless id == SKIP
      @site_id = site_id unless site_id == SKIP
      @customer_id = customer_id unless customer_id == SKIP
      @subscription_id = subscription_id unless subscription_id == SKIP
      @number = number unless number == SKIP
      @sequence_number = sequence_number unless sequence_number == SKIP
      @created_at = created_at unless created_at == SKIP
      @updated_at = updated_at unless updated_at == SKIP
      @issue_date = issue_date unless issue_date == SKIP
      @due_date = due_date unless due_date == SKIP
      @paid_date = paid_date unless paid_date == SKIP
      @status = status unless status == SKIP
      @parent_invoice_id = parent_invoice_id unless parent_invoice_id == SKIP
      @collection_method = collection_method unless collection_method == SKIP
      @payment_instructions = payment_instructions unless payment_instructions == SKIP
      @currency = currency unless currency == SKIP
      @parent_invoice_uid = parent_invoice_uid unless parent_invoice_uid == SKIP
      @subscription_group_id = subscription_group_id unless subscription_group_id == SKIP
      unless group_primary_subscription_id == SKIP
        @group_primary_subscription_id =
          group_primary_subscription_id
      end
      @product_name = product_name unless product_name == SKIP
      @product_family_name = product_family_name unless product_family_name == SKIP
      @seller = seller unless seller == SKIP
      @customer = customer unless customer == SKIP
      @payer = payer unless payer == SKIP
      @recipient_emails = recipient_emails unless recipient_emails == SKIP
      @net_terms = net_terms unless net_terms == SKIP
      @billing_address = billing_address unless billing_address == SKIP
      @shipping_address = shipping_address unless shipping_address == SKIP
      @subtotal_amount = subtotal_amount unless subtotal_amount == SKIP
      @discount_amount = discount_amount unless discount_amount == SKIP
      @tax_amount = tax_amount unless tax_amount == SKIP
      @total_amount = total_amount
      @credit_amount = credit_amount unless credit_amount == SKIP
      @refund_amount = refund_amount
      @paid_amount = paid_amount unless paid_amount == SKIP
      @due_amount = due_amount
      @line_items = line_items unless line_items == SKIP
      @discounts = discounts unless discounts == SKIP
      @taxes = taxes unless taxes == SKIP
      @credits = credits unless credits == SKIP
      @refunds = refunds unless refunds == SKIP
      @payments = payments unless payments == SKIP
      @custom_fields = custom_fields unless custom_fields == SKIP
      @display_settings = display_settings unless display_settings == SKIP
      @public_url = public_url unless public_url == SKIP
      @previous_balance_data = previous_balance_data unless previous_balance_data == SKIP
      @chargeback_status = chargeback_status
      @from_collection_method = from_collection_method
      @to_collection_method = to_collection_method
      @gateway_trans_id = gateway_trans_id unless gateway_trans_id == SKIP
      @amount = amount unless amount == SKIP
      @from_status = from_status
      @to_status = to_status
      @applied_date = applied_date unless applied_date == SKIP
      @remaining_amount = remaining_amount unless remaining_amount == SKIP
      @applications = applications unless applications == SKIP
      @origin_invoices = origin_invoices unless origin_invoices == SKIP
      @origin_credit_note_uid = origin_credit_note_uid unless origin_credit_note_uid == SKIP
      unless origin_credit_note_number == SKIP
        @origin_credit_note_number =
          origin_credit_note_number
      end
      @amount_in_cents = amount_in_cents
      @apply_credit = apply_credit
      @credit_note_attributes = credit_note_attributes
      @payment_id = payment_id
      @refund_id = refund_id
      @is_advance_invoice = is_advance_invoice
      @reason = reason

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      uid = hash.key?('uid') ? hash['uid'] : nil
      credit_note_number =
        hash.key?('credit_note_number') ? hash['credit_note_number'] : nil
      credit_note_uid =
        hash.key?('credit_note_uid') ? hash['credit_note_uid'] : nil
      original_amount =
        hash.key?('original_amount') ? hash['original_amount'] : nil
      applied_amount =
        hash.key?('applied_amount') ? hash['applied_amount'] : nil
      transaction_time = if hash.key?('transaction_time')
                           (DateTimeHelper.from_rfc3339(hash['transaction_time']) if hash['transaction_time'])
                         end
      memo = hash.key?('memo') ? hash['memo'] : nil
      debit_note_number =
        hash.key?('debit_note_number') ? hash['debit_note_number'] : nil
      debit_note_uid =
        hash.key?('debit_note_uid') ? hash['debit_note_uid'] : nil
      consolidation_level =
        hash.key?('consolidation_level') ? hash['consolidation_level'] : nil
      payment_method = hash.key?('payment_method') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:ApplyCreditNoteEventData1PaymentMethod), hash['payment_method']
      ) : nil
      transaction_id =
        hash.key?('transaction_id') ? hash['transaction_id'] : nil
      prepayment = hash.key?('prepayment') ? hash['prepayment'] : nil
      total_amount = hash.key?('total_amount') ? hash['total_amount'] : nil
      refund_amount = hash.key?('refund_amount') ? hash['refund_amount'] : nil
      due_amount = hash.key?('due_amount') ? hash['due_amount'] : nil
      chargeback_status =
        hash.key?('chargeback_status') ? hash['chargeback_status'] : nil
      from_collection_method =
        hash.key?('from_collection_method') ? hash['from_collection_method'] : nil
      to_collection_method =
        hash.key?('to_collection_method') ? hash['to_collection_method'] : nil
      from_status = hash.key?('from_status') ? hash['from_status'] : nil
      to_status = hash.key?('to_status') ? hash['to_status'] : nil
      amount_in_cents =
        hash.key?('amount_in_cents') ? hash['amount_in_cents'] : nil
      apply_credit = hash.key?('apply_credit') ? hash['apply_credit'] : nil
      credit_note_attributes = CreditNote1.from_hash(hash['credit_note_attributes']) if
        hash['credit_note_attributes']
      payment_id = hash.key?('payment_id') ? hash['payment_id'] : nil
      refund_id = hash.key?('refund_id') ? hash['refund_id'] : nil
      is_advance_invoice =
        hash.key?('is_advance_invoice') ? hash['is_advance_invoice'] : nil
      reason = hash.key?('reason') ? hash['reason'] : nil
      role = hash.key?('role') ? hash['role'] : SKIP
      consolidated_invoice =
        hash.key?('consolidated_invoice') ? hash['consolidated_invoice'] : SKIP
      # Parameter is an array, so we need to iterate through it
      applied_credit_notes = nil
      unless hash['applied_credit_notes'].nil?
        applied_credit_notes = []
        hash['applied_credit_notes'].each do |structure|
          applied_credit_notes << (AppliedCreditNoteData.from_hash(structure) if structure)
        end
      end

      applied_credit_notes = SKIP unless hash.key?('applied_credit_notes')
      parent_invoice_number =
        hash.key?('parent_invoice_number') ? hash['parent_invoice_number'] : SKIP
      remaining_prepayment_amount =
        hash.key?('remaining_prepayment_amount') ? hash['remaining_prepayment_amount'] : SKIP
      external = hash.key?('external') ? hash['external'] : SKIP
      id = hash.key?('id') ? hash['id'] : SKIP
      site_id = hash.key?('site_id') ? hash['site_id'] : SKIP
      customer_id = hash.key?('customer_id') ? hash['customer_id'] : SKIP
      subscription_id =
        hash.key?('subscription_id') ? hash['subscription_id'] : SKIP
      number = hash.key?('number') ? hash['number'] : SKIP
      sequence_number =
        hash.key?('sequence_number') ? hash['sequence_number'] : SKIP
      created_at = if hash.key?('created_at')
                     (DateTimeHelper.from_rfc3339(hash['created_at']) if hash['created_at'])
                   else
                     SKIP
                   end
      updated_at = if hash.key?('updated_at')
                     (DateTimeHelper.from_rfc3339(hash['updated_at']) if hash['updated_at'])
                   else
                     SKIP
                   end
      issue_date = hash.key?('issue_date') ? hash['issue_date'] : SKIP
      due_date = hash.key?('due_date') ? hash['due_date'] : SKIP
      paid_date = hash.key?('paid_date') ? hash['paid_date'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      parent_invoice_id =
        hash.key?('parent_invoice_id') ? hash['parent_invoice_id'] : SKIP
      collection_method =
        hash.key?('collection_method') ? hash['collection_method'] : SKIP
      payment_instructions =
        hash.key?('payment_instructions') ? hash['payment_instructions'] : SKIP
      currency = hash.key?('currency') ? hash['currency'] : SKIP
      parent_invoice_uid =
        hash.key?('parent_invoice_uid') ? hash['parent_invoice_uid'] : SKIP
      subscription_group_id =
        hash.key?('subscription_group_id') ? hash['subscription_group_id'] : SKIP
      group_primary_subscription_id =
        hash.key?('group_primary_subscription_id') ? hash['group_primary_subscription_id'] : SKIP
      product_name = hash.key?('product_name') ? hash['product_name'] : SKIP
      product_family_name =
        hash.key?('product_family_name') ? hash['product_family_name'] : SKIP
      seller = InvoiceSeller.from_hash(hash['seller']) if hash['seller']
      customer = InvoiceCustomer.from_hash(hash['customer']) if hash['customer']
      payer = InvoicePayer.from_hash(hash['payer']) if hash['payer']
      recipient_emails =
        hash.key?('recipient_emails') ? hash['recipient_emails'] : SKIP
      net_terms = hash.key?('net_terms') ? hash['net_terms'] : SKIP
      billing_address = BillingAddress.from_hash(hash['billing_address']) if
        hash['billing_address']
      shipping_address = ShippingAddress.from_hash(hash['shipping_address']) if
        hash['shipping_address']
      subtotal_amount =
        hash.key?('subtotal_amount') ? hash['subtotal_amount'] : SKIP
      discount_amount =
        hash.key?('discount_amount') ? hash['discount_amount'] : SKIP
      tax_amount = hash.key?('tax_amount') ? hash['tax_amount'] : SKIP
      credit_amount = hash.key?('credit_amount') ? hash['credit_amount'] : SKIP
      paid_amount = hash.key?('paid_amount') ? hash['paid_amount'] : SKIP
      # Parameter is an array, so we need to iterate through it
      line_items = nil
      unless hash['line_items'].nil?
        line_items = []
        hash['line_items'].each do |structure|
          line_items << (InvoiceLineItem2.from_hash(structure) if structure)
        end
      end

      line_items = SKIP unless hash.key?('line_items')
      # Parameter is an array, so we need to iterate through it
      discounts = nil
      unless hash['discounts'].nil?
        discounts = []
        hash['discounts'].each do |structure|
          discounts << (InvoiceDiscount.from_hash(structure) if structure)
        end
      end

      discounts = SKIP unless hash.key?('discounts')
      # Parameter is an array, so we need to iterate through it
      taxes = nil
      unless hash['taxes'].nil?
        taxes = []
        hash['taxes'].each do |structure|
          taxes << (InvoiceTax.from_hash(structure) if structure)
        end
      end

      taxes = SKIP unless hash.key?('taxes')
      # Parameter is an array, so we need to iterate through it
      credits = nil
      unless hash['credits'].nil?
        credits = []
        hash['credits'].each do |structure|
          credits << (InvoiceCredit.from_hash(structure) if structure)
        end
      end

      credits = SKIP unless hash.key?('credits')
      # Parameter is an array, so we need to iterate through it
      refunds = nil
      unless hash['refunds'].nil?
        refunds = []
        hash['refunds'].each do |structure|
          refunds << (InvoiceRefund.from_hash(structure) if structure)
        end
      end

      refunds = SKIP unless hash.key?('refunds')
      # Parameter is an array, so we need to iterate through it
      payments = nil
      unless hash['payments'].nil?
        payments = []
        hash['payments'].each do |structure|
          payments << (InvoicePayment.from_hash(structure) if structure)
        end
      end

      payments = SKIP unless hash.key?('payments')
      # Parameter is an array, so we need to iterate through it
      custom_fields = nil
      unless hash['custom_fields'].nil?
        custom_fields = []
        hash['custom_fields'].each do |structure|
          custom_fields << (InvoiceCustomField.from_hash(structure) if structure)
        end
      end

      custom_fields = SKIP unless hash.key?('custom_fields')
      display_settings = InvoiceDisplaySettings.from_hash(hash['display_settings']) if
        hash['display_settings']
      public_url = hash.key?('public_url') ? hash['public_url'] : SKIP
      previous_balance_data = InvoicePreviousBalance.from_hash(hash['previous_balance_data']) if
        hash['previous_balance_data']
      gateway_trans_id =
        hash.key?('gateway_trans_id') ? hash['gateway_trans_id'] : SKIP
      amount = hash.key?('amount') ? hash['amount'] : SKIP
      applied_date = hash.key?('applied_date') ? hash['applied_date'] : SKIP
      remaining_amount =
        hash.key?('remaining_amount') ? hash['remaining_amount'] : SKIP
      # Parameter is an array, so we need to iterate through it
      applications = nil
      unless hash['applications'].nil?
        applications = []
        hash['applications'].each do |structure|
          applications << (CreditNoteApplication.from_hash(structure) if structure)
        end
      end

      applications = SKIP unless hash.key?('applications')
      # Parameter is an array, so we need to iterate through it
      origin_invoices = nil
      unless hash['origin_invoices'].nil?
        origin_invoices = []
        hash['origin_invoices'].each do |structure|
          origin_invoices << (OriginInvoice.from_hash(structure) if structure)
        end
      end

      origin_invoices = SKIP unless hash.key?('origin_invoices')
      origin_credit_note_uid =
        hash.key?('origin_credit_note_uid') ? hash['origin_credit_note_uid'] : SKIP
      origin_credit_note_number =
        hash.key?('origin_credit_note_number') ? hash['origin_credit_note_number'] : SKIP

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      ApplyCreditNoteEventData1.new(uid,
                                    credit_note_number,
                                    credit_note_uid,
                                    original_amount,
                                    applied_amount,
                                    transaction_time,
                                    memo,
                                    debit_note_number,
                                    debit_note_uid,
                                    consolidation_level,
                                    payment_method,
                                    transaction_id,
                                    prepayment,
                                    total_amount,
                                    refund_amount,
                                    due_amount,
                                    chargeback_status,
                                    from_collection_method,
                                    to_collection_method,
                                    from_status,
                                    to_status,
                                    amount_in_cents,
                                    apply_credit,
                                    credit_note_attributes,
                                    payment_id,
                                    refund_id,
                                    is_advance_invoice,
                                    reason,
                                    role,
                                    consolidated_invoice,
                                    applied_credit_notes,
                                    parent_invoice_number,
                                    remaining_prepayment_amount,
                                    external,
                                    id,
                                    site_id,
                                    customer_id,
                                    subscription_id,
                                    number,
                                    sequence_number,
                                    created_at,
                                    updated_at,
                                    issue_date,
                                    due_date,
                                    paid_date,
                                    status,
                                    parent_invoice_id,
                                    collection_method,
                                    payment_instructions,
                                    currency,
                                    parent_invoice_uid,
                                    subscription_group_id,
                                    group_primary_subscription_id,
                                    product_name,
                                    product_family_name,
                                    seller,
                                    customer,
                                    payer,
                                    recipient_emails,
                                    net_terms,
                                    billing_address,
                                    shipping_address,
                                    subtotal_amount,
                                    discount_amount,
                                    tax_amount,
                                    credit_amount,
                                    paid_amount,
                                    line_items,
                                    discounts,
                                    taxes,
                                    credits,
                                    refunds,
                                    payments,
                                    custom_fields,
                                    display_settings,
                                    public_url,
                                    previous_balance_data,
                                    gateway_trans_id,
                                    amount,
                                    applied_date,
                                    remaining_amount,
                                    applications,
                                    origin_invoices,
                                    origin_credit_note_uid,
                                    origin_credit_note_number,
                                    hash)
    end

    def to_custom_transaction_time
      DateTimeHelper.to_rfc3339(transaction_time)
    end

    def to_custom_created_at
      DateTimeHelper.to_rfc3339(created_at)
    end

    def to_custom_updated_at
      DateTimeHelper.to_rfc3339(updated_at)
    end

    # Validates an instance of the object from a given value.
    # @param [ApplyCreditNoteEventData1 | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return (
          APIHelper.valid_type?(value.uid,
                                ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.credit_note_number,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.credit_note_uid,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.original_amount,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.applied_amount,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.transaction_time,
                                  ->(val) { val.instance_of? DateTime }) and
            APIHelper.valid_type?(value.memo,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.debit_note_number,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.debit_note_uid,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.consolidation_level,
                                  ->(val) { InvoiceConsolidationLevel.validate(val) }) and
            UnionTypeLookUp.get(:ApplyCreditNoteEventData1PaymentMethod)
                           .validate(value.payment_method) and
            APIHelper.valid_type?(value.transaction_id,
                                  ->(val) { val.instance_of? Integer }) and
            APIHelper.valid_type?(value.prepayment,
                                  ->(val) { val.instance_of? TrueClass or val.instance_of? FalseClass }) and
            APIHelper.valid_type?(value.total_amount,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.refund_amount,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.due_amount,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.chargeback_status,
                                  ->(val) { ChargebackStatus.validate(val) }) and
            APIHelper.valid_type?(value.from_collection_method,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.to_collection_method,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.from_status,
                                  ->(val) { val.instance_of? Object }) and
            APIHelper.valid_type?(value.to_status,
                                  ->(val) { val.instance_of? Object }) and
            APIHelper.valid_type?(value.amount_in_cents,
                                  ->(val) { val.instance_of? Integer }) and
            APIHelper.valid_type?(value.apply_credit,
                                  ->(val) { val.instance_of? TrueClass or val.instance_of? FalseClass }) and
            APIHelper.valid_type?(value.credit_note_attributes,
                                  ->(val) { CreditNote1.validate(val) },
                                  is_model_hash: true) and
            APIHelper.valid_type?(value.payment_id,
                                  ->(val) { val.instance_of? Integer }) and
            APIHelper.valid_type?(value.refund_id,
                                  ->(val) { val.instance_of? Integer }) and
            APIHelper.valid_type?(value.is_advance_invoice,
                                  ->(val) { val.instance_of? TrueClass or val.instance_of? FalseClass }) and
            APIHelper.valid_type?(value.reason,
                                  ->(val) { val.instance_of? String })
        )
      end

      return false unless value.instance_of? Hash

      (
        APIHelper.valid_type?(value['uid'],
                              ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['credit_note_number'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['credit_note_uid'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['original_amount'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['applied_amount'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['transaction_time'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['memo'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['debit_note_number'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['debit_note_uid'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['consolidation_level'],
                                ->(val) { InvoiceConsolidationLevel.validate(val) }) and
          UnionTypeLookUp.get(:ApplyCreditNoteEventData1PaymentMethod)
                         .validate(value['payment_method']) and
          APIHelper.valid_type?(value['transaction_id'],
                                ->(val) { val.instance_of? Integer }) and
          APIHelper.valid_type?(value['prepayment'],
                                ->(val) { val.instance_of? TrueClass or val.instance_of? FalseClass }) and
          APIHelper.valid_type?(value['total_amount'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['refund_amount'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['due_amount'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['chargeback_status'],
                                ->(val) { ChargebackStatus.validate(val) }) and
          APIHelper.valid_type?(value['from_collection_method'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['to_collection_method'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['from_status'],
                                ->(val) { val.instance_of? Object }) and
          APIHelper.valid_type?(value['to_status'],
                                ->(val) { val.instance_of? Object }) and
          APIHelper.valid_type?(value['amount_in_cents'],
                                ->(val) { val.instance_of? Integer }) and
          APIHelper.valid_type?(value['apply_credit'],
                                ->(val) { val.instance_of? TrueClass or val.instance_of? FalseClass }) and
          APIHelper.valid_type?(value['credit_note_attributes'],
                                ->(val) { CreditNote1.validate(val) },
                                is_model_hash: true) and
          APIHelper.valid_type?(value['payment_id'],
                                ->(val) { val.instance_of? Integer }) and
          APIHelper.valid_type?(value['refund_id'],
                                ->(val) { val.instance_of? Integer }) and
          APIHelper.valid_type?(value['is_advance_invoice'],
                                ->(val) { val.instance_of? TrueClass or val.instance_of? FalseClass }) and
          APIHelper.valid_type?(value['reason'],
                                ->(val) { val.instance_of? String })
      )
    end
  end
end
