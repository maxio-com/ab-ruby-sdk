# advanced_billing
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module AdvancedBilling
  # Example schema for an `apply_debit_note` event
  class ApplyDebitNoteEventData < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # A unique, identifying string that appears on the debit note and in places
    # it is referenced.
    # @return [String]
    attr_accessor :debit_note_number

    # Unique identifier for the debit note. It is generated automatically by
    # Chargify and has the prefix "db_" followed by alphanumeric characters.
    # @return [String]
    attr_accessor :debit_note_uid

    # The full, original amount of the debit note.
    # @return [String]
    attr_accessor :original_amount

    # The amount of the debit note applied to invoice.
    # @return [String]
    attr_accessor :applied_amount

    # The debit note memo.
    # @return [String]
    attr_accessor :memo

    # The time the debit note was applied, in ISO 8601 format, i.e.
    # "2019-06-07T17:20:06Z"
    # @return [DateTime]
    attr_accessor :transaction_time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['debit_note_number'] = 'debit_note_number'
      @_hash['debit_note_uid'] = 'debit_note_uid'
      @_hash['original_amount'] = 'original_amount'
      @_hash['applied_amount'] = 'applied_amount'
      @_hash['memo'] = 'memo'
      @_hash['transaction_time'] = 'transaction_time'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        memo
        transaction_time
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        memo
        transaction_time
      ]
    end

    def initialize(debit_note_number:, debit_note_uid:, original_amount:,
                   applied_amount:, memo: SKIP, transaction_time: SKIP,
                   additional_properties = nil)
      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end

      @debit_note_number = debit_note_number
      @debit_note_uid = debit_note_uid
      @original_amount = original_amount
      @applied_amount = applied_amount
      @memo = memo unless memo == SKIP
      @transaction_time = transaction_time unless transaction_time == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      debit_note_number =
        hash.key?('debit_note_number') ? hash['debit_note_number'] : nil
      debit_note_uid =
        hash.key?('debit_note_uid') ? hash['debit_note_uid'] : nil
      original_amount =
        hash.key?('original_amount') ? hash['original_amount'] : nil
      applied_amount =
        hash.key?('applied_amount') ? hash['applied_amount'] : nil
      memo = hash.key?('memo') ? hash['memo'] : SKIP
      transaction_time = if hash.key?('transaction_time')
                           (DateTimeHelper.from_rfc3339(hash['transaction_time']) if hash['transaction_time'])
                         else
                           SKIP
                         end

      # Clean out expected properties from Hash.
      additional_properties = hash.reject { |k, _| names.value?(k) }

      # Create object from extracted values.
      ApplyDebitNoteEventData.new(debit_note_number: debit_note_number,
                                  debit_note_uid: debit_note_uid,
                                  original_amount: original_amount,
                                  applied_amount: applied_amount,
                                  memo: memo,
                                  transaction_time: transaction_time,
                                  additional_properties: additional_properties)
    end

    def to_custom_transaction_time
      DateTimeHelper.to_rfc3339(transaction_time)
    end

    # Validates an instance of the object from a given value.
    # @param [ApplyDebitNoteEventData | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return (
          APIHelper.valid_type?(value.debit_note_number,
                                ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.debit_note_uid,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.original_amount,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.applied_amount,
                                  ->(val) { val.instance_of? String })
        )
      end

      return false unless value.instance_of? Hash

      (
        APIHelper.valid_type?(value['debit_note_number'],
                              ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['debit_note_uid'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['original_amount'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['applied_amount'],
                                ->(val) { val.instance_of? String })
      )
    end
  end
end
