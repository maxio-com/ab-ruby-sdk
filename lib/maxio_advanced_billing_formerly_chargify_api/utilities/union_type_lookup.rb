# maxio_advanced_billing_formerly_chargify_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MaxioAdvancedBillingFormerlyChargifyApi
  # The `UnionTypeLookUp` class serves as a utility class for
  # storing and managing type combinator templates. It acts as a container for the templates
  # used in handling various oneof/anyof instances within the sdk.
  class UnionTypeLookUp
    # rubocop:disable Lint/RedundantCopDisableDirective, Style/HashSyntax, Layout/FirstArgumentIndentation
    def self.union_types
      {
        :CreateCouponBody => OneOf.new(
          [
            LeafType.new(CreateOrUpdateCoupon)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :UpdateCouponBody => OneOf.new(
          [
            LeafType.new(CreateOrUpdateCoupon)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateComponentBody => OneOf.new(
          [
            LeafType.new(CreateMeteredComponent),
            LeafType.new(CreateQuantityBasedComponent),
            LeafType.new(CreateOnOffComponent),
            LeafType.new(CreatePrepaidComponent),
            LeafType.new(CreateEBBComponent)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ListAllComponentPricePointsDirection => OneOf.new(
          [
            LeafType.new(SortingDirectionEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ListCustomersDirection => OneOf.new(
          [
            LeafType.new(SortingDirectionEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ListMetafieldsDirection => OneOf.new(
          [
            LeafType.new(SortingDirectionEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ListMetadataDirection => OneOf.new(
          [
            LeafType.new(SortingDirectionEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ReadMrrMovementsDirection => OneOf.new(
          [
            LeafType.new(SortingDirectionEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ListAllProductPricePointsDirection => OneOf.new(
          [
            LeafType.new(SortingDirectionEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ListSubscriptionsInputDirection => OneOf.new(
          [
            LeafType.new(SortingDirectionEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ListSubscriptionComponentsDirection => OneOf.new(
          [
            LeafType.new(SortingDirectionEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ListSubscriptionComponentsForSiteDirection => OneOf.new(
          [
            LeafType.new(SortingDirectionEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :SubscriptionCancellationMethod => OneOf.new(
          [
            LeafType.new(CancellationMethodEnum)
          ],
          UnionTypeContext.new(
            is_optional: true,
            is_nullable: true
          )
        ),

        :SubscriptionPaymentCollectionMethod => OneOf.new(
          [
            LeafType.new(PaymentCollectionMethodForSubscriptionEnum)
          ],
          UnionTypeContext.new(
            is_optional: true,
            is_nullable: true
          )
        ),

        :SubscriptionGroup => OneOf.new(
          [
            LeafType.new(SubscriptionGroupInlined)
          ],
          UnionTypeContext.new(
            is_optional: true,
            is_nullable: true
          )
        ),

        :SubscriptionPrepaidDunning => OneOf.new(
          [
            AnyOf.new([LeafType.new(TrueClass), LeafType.new(FalseClass)])
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ProductExpirationIntervalUnitCase0 => OneOf.new(
          [
            LeafType.new(ExtendedIntervalUnitEnum)
          ]
        ),

        :ProductExpirationIntervalUnit => OneOf.new(
          [
            OneOf.new(
          [
            LeafType.new(ExtendedIntervalUnitEnum)
          ]
        )
          ],
          UnionTypeContext.new(
            is_optional: true,
            is_nullable: true
          )
        ),

        :ProductIntervalUnit => OneOf.new(
          [
            LeafType.new(IntervalUnitEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ProductTrialIntervalUnitCase0 => OneOf.new(
          [
            LeafType.new(IntervalUnitEnum)
          ]
        ),

        :ProductTrialIntervalUnit => OneOf.new(
          [
            OneOf.new(
          [
            LeafType.new(IntervalUnitEnum)
          ]
        )
          ],
          UnionTypeContext.new(
            is_optional: true,
            is_nullable: true
          )
        ),

        :CreateMetafieldsRequestMetafields => AnyOf.new(
          [
            LeafType.new(CreateMetafield),
            LeafType.new(CreateMetafield, UnionTypeContext.new(
              is_array: true
            ))
          ]
        ),

        :MetafieldEnum => OneOf.new(
          [
            LeafType.new(String, UnionTypeContext.new(
              is_array: true
            ))
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true,
            is_nullable: true
          )
        ),

        :UpdateMetafieldsRequestMetafields => AnyOf.new(
          [
            LeafType.new(UpdateMetafield),
            LeafType.new(UpdateMetafield, UnionTypeContext.new(
              is_array: true
            ))
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateOrUpdateCouponCoupon => OneOf.new(
          [
            LeafType.new(CreateOrUpdatePercentageCoupon),
            LeafType.new(CreateOrUpdateFlatAmountCoupon)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateOrUpdateCouponRestrictedProducts => OneOf.new(
          [
            AnyOf.new([LeafType.new(TrueClass), LeafType.new(FalseClass)], UnionTypeContext.new(
              is_dict: true
            ))
          ],
          UnionTypeContext.new(
            is_dict: true,
            is_optional: true
          )
        ),

        :CreateOrUpdateCouponRestrictedComponents => OneOf.new(
          [
            AnyOf.new([LeafType.new(TrueClass), LeafType.new(FalseClass)], UnionTypeContext.new(
              is_dict: true
            ))
          ],
          UnionTypeContext.new(
            is_dict: true,
            is_optional: true
          )
        ),

        :CreateOrUpdatePercentageCouponPercentage => OneOf.new(
          [
            LeafType.new(Float),
            LeafType.new(String)
          ]
        ),

        :CreateOrUpdatePercentageCouponCompoundingStrategy => OneOf.new(
          [
            LeafType.new(CompoundingStrategyEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateOrUpdateFlatAmountCouponCompoundingStrategy => OneOf.new(
          [
            LeafType.new(CompoundingStrategyEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CouponCompoundingStrategyCase0 => OneOf.new(
          [
            LeafType.new(CompoundingStrategyEnum)
          ]
        ),

        :CouponCompoundingStrategy => AnyOf.new(
          [
            OneOf.new(
          [
            LeafType.new(CompoundingStrategyEnum)
          ]
        )
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :EventEventSpecificData => OneOf.new(
          [
            LeafType.new(EventData)
          ],
          UnionTypeContext.new(
            is_nullable: true
          )
        ),

        :MeteredComponentPricingScheme => OneOf.new(
          [
            LeafType.new(PricingSchemeEnum)
          ]
        ),

        :MeteredComponentUnitPrice => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateComponentPriceUnitPrice => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :QuantityBasedComponentPricingScheme => OneOf.new(
          [
            LeafType.new(PricingSchemeEnum)
          ]
        ),

        :QuantityBasedComponentUnitPrice => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :OnOffComponentPricingScheme => OneOf.new(
          [
            LeafType.new(PricingSchemeEnum)
          ]
        ),

        :OnOffComponentUnitPrice => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :PrepaidUsageComponentPricingScheme => OneOf.new(
          [
            LeafType.new(PricingSchemeEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :PrepaidUsageComponentUnitPrice => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :PrepaidUsageComponentExpirationIntervalUnit => OneOf.new(
          [
            LeafType.new(IntervalUnitEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :OveragePricingPricingScheme => OneOf.new(
          [
            LeafType.new(PricingSchemeEnum)
          ]
        ),

        :OveragePricingPrices => OneOf.new(
          [
            LeafType.new(Price, UnionTypeContext.new(
              is_array: true
            ))
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :PriceStartingQuantity => OneOf.new(
          [
            LeafType.new(Integer),
            LeafType.new(String)
          ]
        ),

        :PriceEndingQuantity => OneOf.new(
          [
            LeafType.new(Integer),
            LeafType.new(String)
          ],
          UnionTypeContext.new(
            is_optional: true,
            is_nullable: true
          )
        ),

        :PriceUnitPrice => OneOf.new(
          [
            LeafType.new(Integer),
            LeafType.new(String)
          ]
        ),

        :EBBComponentPricingScheme => OneOf.new(
          [
            LeafType.new(PricingSchemeEnum)
          ]
        ),

        :EBBComponentUnitPrice => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateComponentPricePointRequestPricePoint => AnyOf.new(
          [
            LeafType.new(CreateComponentPricePoint),
            LeafType.new(CreatePrepaidUsageComponentPricePoint)
          ]
        ),

        :CreatePrepaidUsageComponentPricePointExpirationIntervalUnit => OneOf.new(
          [
            LeafType.new(IntervalUnitEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :PricePointExpirationIntervalUnit => OneOf.new(
          [
            LeafType.new(IntervalUnitEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateComponentPricePointsRequestPricePoints => AnyOf.new(
          [
            LeafType.new(CreateComponentPricePoint),
            LeafType.new(CreatePrepaidUsageComponentPricePoint)
          ],
          UnionTypeContext.new(
            is_array: true
          )
        ),

        :CreatePaymentProfileExpirationMonth => OneOf.new(
          [
            LeafType.new(Integer),
            LeafType.new(String)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreatePaymentProfileExpirationYear => OneOf.new(
          [
            LeafType.new(Integer),
            LeafType.new(String)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ReadPaymentProfileResponsePaymentProfile => OneOf.new(
          [
            LeafType.new(BankAccountPaymentProfile),
            LeafType.new(CreditCardPaymentProfile)
          ]
        ),

        :RefundInvoiceRequestRefund => AnyOf.new(
          [
            LeafType.new(RefundInvoice),
            LeafType.new(RefundConsolidatedInvoice)
          ]
        ),

        :RefundConsolidatedInvoiceSegmentUids => OneOf.new(
          [
            LeafType.new(String, UnionTypeContext.new(
              is_array: true
            )),
            LeafType.new(String)
          ]
        ),

        :RefundSegmentUids => OneOf.new(
          [
            LeafType.new(String, UnionTypeContext.new(
              is_array: true
            )),
            LeafType.new(String)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :InvoiceEventEventData => AnyOf.new(
          [
            LeafType.new(ApplyPaymentEventData)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateInvoicePaymentAmount => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateMultiInvoicePaymentAmount => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float)
          ]
        ),

        :SubscriptionComponentPricePointType => OneOf.new(
          [
            LeafType.new(PricePointTypeEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ComponentSPricePointAssignmentPricePoint => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateAllocationQuantity => OneOf.new(
          [
            LeafType.new(Integer),
            LeafType.new(Float)
          ]
        ),

        :CreateAllocationPricePointId => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true,
            is_nullable: true
          )
        ),

        :AllocationPayment => AnyOf.new(
          [
            LeafType.new(AllocationPayment)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :AllocationPreviewItemQuantity => OneOf.new(
          [
            LeafType.new(Float),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateUsageQuantity => OneOf.new(
          [
            LeafType.new(Integer),
            LeafType.new(Float)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :UsageQuantity => OneOf.new(
          [
            LeafType.new(Integer),
            LeafType.new(String)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateSubscriptionComponents => OneOf.new(
          [
            LeafType.new(CreateSubscriptionComponent)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :CreateSubscriptionGroup => OneOf.new(
          [
            LeafType.new(GroupSettings),
            AnyOf.new([LeafType.new(TrueClass), LeafType.new(FalseClass)])
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateSubscriptionOfferId => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CustomPriceUsedForSubscriptionCreateUpdatePriceInCents => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CustomPriceUsedForSubscriptionCreateUpdateInterval => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CustomPriceUsedForSubscriptionCreateUpdateIntervalUnit => OneOf.new(
          [
            LeafType.new(IntervalUnitEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CustomPriceUsedForSubscriptionCreateUpdateTrialPriceInCents => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CustomPriceUsedForSubscriptionCreateUpdateTrialInterval => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CustomPriceUsedForSubscriptionCreateUpdateTrialIntervalUnit => OneOf.new(
          [
            LeafType.new(IntervalUnitEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CustomPriceUsedForSubscriptionCreateUpdateInitialChargeInCents => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CustomPriceUsedForSubscriptionCreateUpdateExpirationInterval => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CustomPriceUsedForSubscriptionCreateUpdateExpirationIntervalUnit => OneOf.new(
          [
            LeafType.new(IntervalUnitEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :PaymentProfileAttributesExpirationMonth => OneOf.new(
          [
            LeafType.new(Integer),
            LeafType.new(String)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :PaymentProfileAttributesExpirationYear => OneOf.new(
          [
            LeafType.new(Integer),
            LeafType.new(String)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateSubscriptionComponentComponentId => OneOf.new(
          [
            LeafType.new(Integer),
            LeafType.new(String)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateSubscriptionComponentPricePointId => OneOf.new(
          [
            LeafType.new(Integer),
            LeafType.new(String)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ComponentCustomPricePricingScheme => OneOf.new(
          [
            LeafType.new(PricingSchemeEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CalendarBillingSnapDay => OneOf.new(
          [
            LeafType.new(Integer),
            LeafType.new(String)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :UpdateSubscriptionSnapDay => OneOf.new(
          [
            LeafType.new(SnapDayEnum),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :UpdateSubscriptionNetTerms => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ReactivateSubscriptionRequestResume => OneOf.new(
          [
            AnyOf.new([LeafType.new(TrueClass), LeafType.new(FalseClass)]),
            LeafType.new(ResumeOptions)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :RenewalPreviewComponentComponentId => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :RenewalPreviewComponentPricePointId => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateInvoiceItemQuantity => OneOf.new(
          [
            LeafType.new(Float),
            LeafType.new(String)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateInvoiceItemUnitPrice => OneOf.new(
          [
            LeafType.new(Float),
            LeafType.new(String)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateInvoiceItemProductId => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateInvoiceItemComponentId => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateInvoiceItemPricePointId => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateInvoiceItemProductPricePointId => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateInvoiceCouponPercentage => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateInvoiceCouponAmount => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateInvoiceCouponProductFamilyId => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateInvoiceCouponCompoundingStrategy => OneOf.new(
          [
            LeafType.new(CompoundingStrategyEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :IssueServiceCreditAmount => OneOf.new(
          [
            LeafType.new(Float),
            LeafType.new(String)
          ]
        ),

        :DeductServiceCreditAmount => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float)
          ]
        ),

        :SubscriptionGroupCreditCardFullNumber => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :SubscriptionGroupCreditCardExpirationMonth => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :SubscriptionGroupCreditCardExpirationYear => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :SubscriptionGroupSignupComponentComponentId => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :SubscriptionGroupSignupComponentAllocatedQuantity => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :SubscriptionGroupSignupComponentUnitBalance => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :SubscriptionGroupSignupComponentPricePointId => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :SubscriptionGroupComponentCustomPricePricingScheme => OneOf.new(
          [
            LeafType.new(PricingSchemeEnum)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateSubscriptionGroupSubscriptionId => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Integer)
          ]
        ),

        :AddSubscriptionToAGroupGroup => OneOf.new(
          [
            LeafType.new(GroupSettings),
            AnyOf.new([LeafType.new(TrueClass), LeafType.new(FalseClass)])
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateSegmentSegmentProperty1Value => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float),
            LeafType.new(Integer),
            AnyOf.new([LeafType.new(TrueClass), LeafType.new(FalseClass)])
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateSegmentSegmentProperty2Value => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float),
            LeafType.new(Integer),
            AnyOf.new([LeafType.new(TrueClass), LeafType.new(FalseClass)])
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateSegmentSegmentProperty3Value => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float),
            LeafType.new(Integer),
            AnyOf.new([LeafType.new(TrueClass), LeafType.new(FalseClass)])
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateSegmentSegmentProperty4Value => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float),
            LeafType.new(Integer),
            AnyOf.new([LeafType.new(TrueClass), LeafType.new(FalseClass)])
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CreateOrUpdateSegmentPriceUnitPrice => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float)
          ]
        ),

        :SegmentSegmentProperty1Value => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float),
            LeafType.new(Integer),
            AnyOf.new([LeafType.new(TrueClass), LeafType.new(FalseClass)])
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :SegmentSegmentProperty2Value => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float),
            LeafType.new(Integer),
            AnyOf.new([LeafType.new(TrueClass), LeafType.new(FalseClass)])
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :SegmentSegmentProperty3Value => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float),
            LeafType.new(Integer),
            AnyOf.new([LeafType.new(TrueClass), LeafType.new(FalseClass)])
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :SegmentSegmentProperty4Value => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float),
            LeafType.new(Integer),
            AnyOf.new([LeafType.new(TrueClass), LeafType.new(FalseClass)])
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :RefundPrepaymentAmount => OneOf.new(
          [
            LeafType.new(String),
            LeafType.new(Float)
          ]
        )
      }
    end
    # rubocop:enable Lint/RedundantCopDisableDirective, Style/HashSyntax, Layout/FirstArgumentIndentation

    def self.get(name)
      UnionTypeLookUp.union_types[name]
    end
  end
end
