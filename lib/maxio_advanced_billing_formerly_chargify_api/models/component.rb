# maxio_advanced_billing_formerly_chargify_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MaxioAdvancedBillingFormerlyChargifyApi
  # Component Model.
  class Component < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The unique ID assigned to the component by Chargify. This ID can be used
    # to fetch the component from the API.
    # @return [Integer]
    attr_accessor :id

    # The name of the Component, suitable for display on statements. i.e. Text
    # Messages.
    # @return [String]
    attr_accessor :name

    # The handle for the pricing scheme. Available options: per_unit, volume,
    # tiered, stairstep. See [Price Bracket
    # Rules](https://chargify.zendesk.com/hc/en-us/articles/4407755865883#price-
    # bracket-rules) for an overview of pricing schemes.
    # @return [String]
    attr_accessor :pricing_scheme

    # The name of the unit that the component’s usage is measured in. i.e.
    # message
    # @return [String]
    attr_accessor :unit_name

    # The amount the customer will be charged per unit. This field is only
    # populated for ‘per_unit’ pricing schemes, otherwise it may be null.
    # @return [String]
    attr_accessor :unit_price

    # The id of the Product Family to which the Component belongs
    # @return [Integer]
    attr_accessor :product_family_id

    # deprecated - use unit_price instead
    # @return [Integer]
    attr_accessor :price_per_unit_in_cents

    # A handle for the component type
    # @return [ComponentKindEnum]
    attr_accessor :kind

    # Boolean flag describing whether a component is archived or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :archived

    # Boolean flag describing whether a component is taxable or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :taxable

    # The description of the component.
    # @return [String]
    attr_accessor :description

    # The description of the component.
    # @return [Integer]
    attr_accessor :default_price_point_id

    # Count for the number of price points associated with the component
    # @return [Integer]
    attr_accessor :price_point_count

    # URL that points to the location to read the existing price points via GET
    # request
    # @return [String]
    attr_accessor :price_points_url

    # A string representing the tax code related to the component type. This is
    # especially important when using the Avalara service to tax based on
    # locale. This attribute has a max length of 10 characters.
    # @return [String]
    attr_accessor :tax_code

    # A string representing the tax code related to the component type. This is
    # especially important when using the Avalara service to tax based on
    # locale. This attribute has a max length of 10 characters.
    # @return [TrueClass | FalseClass]
    attr_accessor :recurring

    # A string representing the tax code related to the component type. This is
    # especially important when using the Avalara service to tax based on
    # locale. This attribute has a max length of 10 characters.
    # @return [String]
    attr_accessor :upgrade_charge

    # A string representing the tax code related to the component type. This is
    # especially important when using the Avalara service to tax based on
    # locale. This attribute has a max length of 10 characters.
    # @return [String]
    attr_accessor :downgrade_credit

    # A string representing the tax code related to the component type. This is
    # especially important when using the Avalara service to tax based on
    # locale. This attribute has a max length of 10 characters.
    # @return [String]
    attr_accessor :created_at

    # An array of price brackets. If the component uses the ‘per_unit’ pricing
    # scheme, this array will be empty.
    # @return [Array[ComponentPrice]]
    attr_accessor :prices

    # An array of price brackets. If the component uses the ‘per_unit’ pricing
    # scheme, this array will be empty.
    # @return [String]
    attr_accessor :default_price_point_name

    # An array of price brackets. If the component uses the ‘per_unit’ pricing
    # scheme, this array will be empty.
    # @return [String]
    attr_accessor :product_family_name

    # (Only available on Relationship Invoicing sites) Boolean flag describing
    # if the service date range should show for the component on generated
    # invoices.
    # @return [TrueClass | FalseClass]
    attr_accessor :hide_date_range_on_invoice

    # (Only for Event Based Components) This is an ID of a metric attached to
    # the component. This metric is used to bill upon collected events.
    # @return [Integer]
    attr_accessor :event_based_billing_metric_id

    # One of the following: Business Software, Consumer Software, Digital
    # Services, Physical Goods, Other
    # @return [ItemCategoryEnum]
    attr_accessor :item_category

    # One of the following: Business Software, Consumer Software, Digital
    # Services, Physical Goods, Other
    # @return [TrueClass | FalseClass]
    attr_accessor :allow_fractional_quantities

    # One of the following: Business Software, Consumer Software, Digital
    # Services, Physical Goods, Other
    # @return [TrueClass | FalseClass]
    attr_accessor :use_site_exchange_rate

    # E.g. Internal ID or SKU Number
    # @return [String]
    attr_accessor :accounting_code

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['pricing_scheme'] = 'pricing_scheme'
      @_hash['unit_name'] = 'unit_name'
      @_hash['unit_price'] = 'unit_price'
      @_hash['product_family_id'] = 'product_family_id'
      @_hash['price_per_unit_in_cents'] = 'price_per_unit_in_cents'
      @_hash['kind'] = 'kind'
      @_hash['archived'] = 'archived'
      @_hash['taxable'] = 'taxable'
      @_hash['description'] = 'description'
      @_hash['default_price_point_id'] = 'default_price_point_id'
      @_hash['price_point_count'] = 'price_point_count'
      @_hash['price_points_url'] = 'price_points_url'
      @_hash['tax_code'] = 'tax_code'
      @_hash['recurring'] = 'recurring'
      @_hash['upgrade_charge'] = 'upgrade_charge'
      @_hash['downgrade_credit'] = 'downgrade_credit'
      @_hash['created_at'] = 'created_at'
      @_hash['prices'] = 'prices'
      @_hash['default_price_point_name'] = 'default_price_point_name'
      @_hash['product_family_name'] = 'product_family_name'
      @_hash['hide_date_range_on_invoice'] = 'hide_date_range_on_invoice'
      @_hash['event_based_billing_metric_id'] =
        'event_based_billing_metric_id'
      @_hash['item_category'] = 'item_category'
      @_hash['allow_fractional_quantities'] = 'allow_fractional_quantities'
      @_hash['use_site_exchange_rate'] = 'use_site_exchange_rate'
      @_hash['accounting_code'] = 'accounting_code'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        name
        pricing_scheme
        unit_name
        unit_price
        product_family_id
        price_per_unit_in_cents
        kind
        archived
        taxable
        description
        default_price_point_id
        price_point_count
        price_points_url
        tax_code
        recurring
        upgrade_charge
        downgrade_credit
        created_at
        prices
        default_price_point_name
        product_family_name
        hide_date_range_on_invoice
        event_based_billing_metric_id
        item_category
        allow_fractional_quantities
        use_site_exchange_rate
        accounting_code
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        pricing_scheme
        unit_price
        price_per_unit_in_cents
        description
        tax_code
        upgrade_charge
        downgrade_credit
        prices
        use_site_exchange_rate
        accounting_code
      ]
    end

    def initialize(id = SKIP,
                   name = SKIP,
                   pricing_scheme = SKIP,
                   unit_name = SKIP,
                   unit_price = SKIP,
                   product_family_id = SKIP,
                   price_per_unit_in_cents = SKIP,
                   kind = SKIP,
                   archived = SKIP,
                   taxable = SKIP,
                   description = SKIP,
                   default_price_point_id = SKIP,
                   price_point_count = SKIP,
                   price_points_url = SKIP,
                   tax_code = SKIP,
                   recurring = SKIP,
                   upgrade_charge = SKIP,
                   downgrade_credit = SKIP,
                   created_at = SKIP,
                   prices = SKIP,
                   default_price_point_name = SKIP,
                   product_family_name = SKIP,
                   hide_date_range_on_invoice = SKIP,
                   event_based_billing_metric_id = SKIP,
                   item_category = SKIP,
                   allow_fractional_quantities = SKIP,
                   use_site_exchange_rate = SKIP,
                   accounting_code = SKIP)
      @id = id unless id == SKIP
      @name = name unless name == SKIP
      @pricing_scheme = pricing_scheme unless pricing_scheme == SKIP
      @unit_name = unit_name unless unit_name == SKIP
      @unit_price = unit_price unless unit_price == SKIP
      @product_family_id = product_family_id unless product_family_id == SKIP
      @price_per_unit_in_cents = price_per_unit_in_cents unless price_per_unit_in_cents == SKIP
      @kind = kind unless kind == SKIP
      @archived = archived unless archived == SKIP
      @taxable = taxable unless taxable == SKIP
      @description = description unless description == SKIP
      @default_price_point_id = default_price_point_id unless default_price_point_id == SKIP
      @price_point_count = price_point_count unless price_point_count == SKIP
      @price_points_url = price_points_url unless price_points_url == SKIP
      @tax_code = tax_code unless tax_code == SKIP
      @recurring = recurring unless recurring == SKIP
      @upgrade_charge = upgrade_charge unless upgrade_charge == SKIP
      @downgrade_credit = downgrade_credit unless downgrade_credit == SKIP
      @created_at = created_at unless created_at == SKIP
      @prices = prices unless prices == SKIP
      @default_price_point_name = default_price_point_name unless default_price_point_name == SKIP
      @product_family_name = product_family_name unless product_family_name == SKIP
      unless hide_date_range_on_invoice == SKIP
        @hide_date_range_on_invoice =
          hide_date_range_on_invoice
      end
      unless event_based_billing_metric_id == SKIP
        @event_based_billing_metric_id =
          event_based_billing_metric_id
      end
      @item_category = item_category unless item_category == SKIP
      unless allow_fractional_quantities == SKIP
        @allow_fractional_quantities =
          allow_fractional_quantities
      end
      @use_site_exchange_rate = use_site_exchange_rate unless use_site_exchange_rate == SKIP
      @accounting_code = accounting_code unless accounting_code == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      pricing_scheme =
        hash.key?('pricing_scheme') ? hash['pricing_scheme'] : SKIP
      unit_name = hash.key?('unit_name') ? hash['unit_name'] : SKIP
      unit_price = hash.key?('unit_price') ? hash['unit_price'] : SKIP
      product_family_id =
        hash.key?('product_family_id') ? hash['product_family_id'] : SKIP
      price_per_unit_in_cents =
        hash.key?('price_per_unit_in_cents') ? hash['price_per_unit_in_cents'] : SKIP
      kind = hash.key?('kind') ? hash['kind'] : SKIP
      archived = hash.key?('archived') ? hash['archived'] : SKIP
      taxable = hash.key?('taxable') ? hash['taxable'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP
      default_price_point_id =
        hash.key?('default_price_point_id') ? hash['default_price_point_id'] : SKIP
      price_point_count =
        hash.key?('price_point_count') ? hash['price_point_count'] : SKIP
      price_points_url =
        hash.key?('price_points_url') ? hash['price_points_url'] : SKIP
      tax_code = hash.key?('tax_code') ? hash['tax_code'] : SKIP
      recurring = hash.key?('recurring') ? hash['recurring'] : SKIP
      upgrade_charge =
        hash.key?('upgrade_charge') ? hash['upgrade_charge'] : SKIP
      downgrade_credit =
        hash.key?('downgrade_credit') ? hash['downgrade_credit'] : SKIP
      created_at = hash.key?('created_at') ? hash['created_at'] : SKIP
      # Parameter is an array, so we need to iterate through it
      prices = nil
      unless hash['prices'].nil?
        prices = []
        hash['prices'].each do |structure|
          prices << (ComponentPrice.from_hash(structure) if structure)
        end
      end

      prices = SKIP unless hash.key?('prices')
      default_price_point_name =
        hash.key?('default_price_point_name') ? hash['default_price_point_name'] : SKIP
      product_family_name =
        hash.key?('product_family_name') ? hash['product_family_name'] : SKIP
      hide_date_range_on_invoice =
        hash.key?('hide_date_range_on_invoice') ? hash['hide_date_range_on_invoice'] : SKIP
      event_based_billing_metric_id =
        hash.key?('event_based_billing_metric_id') ? hash['event_based_billing_metric_id'] : SKIP
      item_category = hash.key?('item_category') ? hash['item_category'] : SKIP
      allow_fractional_quantities =
        hash.key?('allow_fractional_quantities') ? hash['allow_fractional_quantities'] : SKIP
      use_site_exchange_rate =
        hash.key?('use_site_exchange_rate') ? hash['use_site_exchange_rate'] : SKIP
      accounting_code =
        hash.key?('accounting_code') ? hash['accounting_code'] : SKIP

      # Create object from extracted values.
      Component.new(id,
                    name,
                    pricing_scheme,
                    unit_name,
                    unit_price,
                    product_family_id,
                    price_per_unit_in_cents,
                    kind,
                    archived,
                    taxable,
                    description,
                    default_price_point_id,
                    price_point_count,
                    price_points_url,
                    tax_code,
                    recurring,
                    upgrade_charge,
                    downgrade_credit,
                    created_at,
                    prices,
                    default_price_point_name,
                    product_family_name,
                    hide_date_range_on_invoice,
                    event_based_billing_metric_id,
                    item_category,
                    allow_fractional_quantities,
                    use_site_exchange_rate,
                    accounting_code)
    end
  end
end
