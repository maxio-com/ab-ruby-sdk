# maxio_advanced_billing_formerly_chargify_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MaxioAdvancedBillingFormerlyChargifyApi
  # AllocationPreview Model.
  class AllocationPreview < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :start_date

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :end_date

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :subtotal_in_cents

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :total_tax_in_cents

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :total_discount_in_cents

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :total_in_cents

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :direction

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :proration_scheme

    # TODO: Write general description for this method
    # @return [Array[AllocationPreviewLineItem]]
    attr_accessor :line_items

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :accrue_charge

    # TODO: Write general description for this method
    # @return [Array[AllocationPreviewItem]]
    attr_accessor :allocations

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['start_date'] = 'start_date'
      @_hash['end_date'] = 'end_date'
      @_hash['subtotal_in_cents'] = 'subtotal_in_cents'
      @_hash['total_tax_in_cents'] = 'total_tax_in_cents'
      @_hash['total_discount_in_cents'] = 'total_discount_in_cents'
      @_hash['total_in_cents'] = 'total_in_cents'
      @_hash['direction'] = 'direction'
      @_hash['proration_scheme'] = 'proration_scheme'
      @_hash['line_items'] = 'line_items'
      @_hash['accrue_charge'] = 'accrue_charge'
      @_hash['allocations'] = 'allocations'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        start_date
        end_date
        subtotal_in_cents
        total_tax_in_cents
        total_discount_in_cents
        total_in_cents
        direction
        proration_scheme
        line_items
        accrue_charge
        allocations
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(start_date = SKIP,
                   end_date = SKIP,
                   subtotal_in_cents = SKIP,
                   total_tax_in_cents = SKIP,
                   total_discount_in_cents = SKIP,
                   total_in_cents = SKIP,
                   direction = SKIP,
                   proration_scheme = SKIP,
                   line_items = SKIP,
                   accrue_charge = SKIP,
                   allocations = SKIP)
      @start_date = start_date unless start_date == SKIP
      @end_date = end_date unless end_date == SKIP
      @subtotal_in_cents = subtotal_in_cents unless subtotal_in_cents == SKIP
      @total_tax_in_cents = total_tax_in_cents unless total_tax_in_cents == SKIP
      @total_discount_in_cents = total_discount_in_cents unless total_discount_in_cents == SKIP
      @total_in_cents = total_in_cents unless total_in_cents == SKIP
      @direction = direction unless direction == SKIP
      @proration_scheme = proration_scheme unless proration_scheme == SKIP
      @line_items = line_items unless line_items == SKIP
      @accrue_charge = accrue_charge unless accrue_charge == SKIP
      @allocations = allocations unless allocations == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      start_date = hash.key?('start_date') ? hash['start_date'] : SKIP
      end_date = hash.key?('end_date') ? hash['end_date'] : SKIP
      subtotal_in_cents =
        hash.key?('subtotal_in_cents') ? hash['subtotal_in_cents'] : SKIP
      total_tax_in_cents =
        hash.key?('total_tax_in_cents') ? hash['total_tax_in_cents'] : SKIP
      total_discount_in_cents =
        hash.key?('total_discount_in_cents') ? hash['total_discount_in_cents'] : SKIP
      total_in_cents =
        hash.key?('total_in_cents') ? hash['total_in_cents'] : SKIP
      direction = hash.key?('direction') ? hash['direction'] : SKIP
      proration_scheme =
        hash.key?('proration_scheme') ? hash['proration_scheme'] : SKIP
      # Parameter is an array, so we need to iterate through it
      line_items = nil
      unless hash['line_items'].nil?
        line_items = []
        hash['line_items'].each do |structure|
          line_items << (AllocationPreviewLineItem.from_hash(structure) if structure)
        end
      end

      line_items = SKIP unless hash.key?('line_items')
      accrue_charge = hash.key?('accrue_charge') ? hash['accrue_charge'] : SKIP
      # Parameter is an array, so we need to iterate through it
      allocations = nil
      unless hash['allocations'].nil?
        allocations = []
        hash['allocations'].each do |structure|
          allocations << (AllocationPreviewItem.from_hash(structure) if structure)
        end
      end

      allocations = SKIP unless hash.key?('allocations')

      # Create object from extracted values.
      AllocationPreview.new(start_date,
                            end_date,
                            subtotal_in_cents,
                            total_tax_in_cents,
                            total_discount_in_cents,
                            total_in_cents,
                            direction,
                            proration_scheme,
                            line_items,
                            accrue_charge,
                            allocations)
    end
  end
end
